syntax = "proto3";
option cc_enable_arenas = true;

service UIService {
    rpc NewSession(NewSessionRequest) returns (NewSessionResponse);

    // Used by the IO driver which runs the user-provided Python script.
    rpc IOServerConnect(stream IOServerRequest) returns (stream IOServerResponse);

    // Used by the UI to display I/O data in a streaming fashion.
    rpc GetIODataForUI(UIIODataRequest) returns (stream UIIODataUpdate);
}

message NewSessionRequest {
    // path of the binary to run.
    string binary = 1;
    // The contents of the IO script.
    string script = 2;
}

message NewSessionResponse {
    int32 id = 1;
}

// Begin messages used for the IO driver to communicate with the server.
message IOServerRequest {
    oneof request {
        int32 start_id = 1;  // start the session
        IOConsumer read = 2;
        IOProducer write = 3;
        IOConsumerSync sync = 4;
    }
}

message IOConsumer {
    message Any {
    }
    message Line {
        IOConsumer predicate = 1;
    }
    message Regex {
        string regex = 1;
        repeated IOConsumerInterpretation group_interp = 2;
    }
    message Literal {
        string literal = 1;
    }
    message NChars {
        int32 min = 1;
        int32 max = 2;
    }
    message Number {}
    message Chain {
        repeated IOConsumer consumers = 1;
    }
    message OneOf {
        repeated IOConsumer consumers = 1;
    }
    int32 chain_id = 1;
    IOConsumerInterpretation interp = 2;

    oneof consumer {
        Any any = 3;
        Line line = 4;
        Regex regex = 5;
        Literal literal = 6;
        NChars nchars = 7;
        Number number = 8;
        Chain chain = 9;
        OneOf oneof = 10;
    }
}

enum IOConsumerInterpretation {
    IOCI_INVALID = 0;
    IOCI_RAW = 1;
    IOCI_LITTLE_ENDIAN = 2;
    IOCI_DECIMAL = 3;
}

message IOProducer {
    message LittleEndianNumber {
        int64 number = 1;
        int32 width = 2;
    }
    message DecimalNumber {
        int64 number = 1;
    }
    message Literal {
        string literal = 1;
    }
    oneof producer {
        LittleEndianNumber little_endian_number = 1;
        DecimalNumber decimal_number = 2;
        Literal literal = 3;
    }
}

message IOConsumerSync {
    int32 chain_id = 1;
}

message IOReadResult {
    message Any {
    }
    message Line {
        IOReadResult inner = 1;
    }
    message Regex {
        repeated string groups = 1;
    }
    message Literal {

    }
    message NChars {
    }
    message Number {
    }
    message Chain {
        repeated IOReadResult inner = 1;
    }
    message OneOf {
        int32 index = 1;
        IOReadResult inner = 2;
    }

    string data = 1;
    oneof detail {
        Any any = 2;
        Line line = 3;
        Regex regex = 4;
        Literal literal = 5;
        NChars nchars = 6;
        Number number = 7;
        Chain chain = 8;
        OneOf oneof = 9;
    }
}

message IOServerResponse {
    oneof response {
        bool ack = 1;
        IOReadResult result = 2;
    }
}

// End messages used for the IO driver to communicate with the server.

// Begin messages used for IO data streaming to the UI.
message UIIODataRequest {
    int32 session_id = 1;
}

message UIIODataUpdate {
    int64 timestamp = 3;

    oneof kind {
        UIIODriverOutput driver_output = 1;
        // TODO: Implement the IO data output again.
    }
}

message UIIODriverOutput {
    bytes data = 1;
    bool is_stderr = 2;
}


// End messages used for IO data streaming to the UI.
