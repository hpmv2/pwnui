/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.IOConsumer', null, global);
goog.exportSymbol('proto.IOConsumer.Any', null, global);
goog.exportSymbol('proto.IOConsumer.Chain', null, global);
goog.exportSymbol('proto.IOConsumer.Line', null, global);
goog.exportSymbol('proto.IOConsumer.Literal', null, global);
goog.exportSymbol('proto.IOConsumer.NChars', null, global);
goog.exportSymbol('proto.IOConsumer.Number', null, global);
goog.exportSymbol('proto.IOConsumer.OneOf', null, global);
goog.exportSymbol('proto.IOConsumer.Peek', null, global);
goog.exportSymbol('proto.IOConsumer.Regex', null, global);
goog.exportSymbol('proto.IOConsumerInterpretation', null, global);
goog.exportSymbol('proto.IOConsumerSync', null, global);
goog.exportSymbol('proto.IOProducer', null, global);
goog.exportSymbol('proto.IOProducer.DecimalNumber', null, global);
goog.exportSymbol('proto.IOProducer.Literal', null, global);
goog.exportSymbol('proto.IOProducer.LittleEndianNumber', null, global);
goog.exportSymbol('proto.IOReadResult', null, global);
goog.exportSymbol('proto.IOReadResult.Any', null, global);
goog.exportSymbol('proto.IOReadResult.Chain', null, global);
goog.exportSymbol('proto.IOReadResult.Line', null, global);
goog.exportSymbol('proto.IOReadResult.Literal', null, global);
goog.exportSymbol('proto.IOReadResult.NChars', null, global);
goog.exportSymbol('proto.IOReadResult.Number', null, global);
goog.exportSymbol('proto.IOReadResult.OneOf', null, global);
goog.exportSymbol('proto.IOReadResult.Peek', null, global);
goog.exportSymbol('proto.IOReadResult.Regex', null, global);
goog.exportSymbol('proto.IOServerRequest', null, global);
goog.exportSymbol('proto.IOServerResponse', null, global);
goog.exportSymbol('proto.NewSessionRequest', null, global);
goog.exportSymbol('proto.NewSessionResponse', null, global);
goog.exportSymbol('proto.UIIODataRequest', null, global);
goog.exportSymbol('proto.UIIODataUpdate', null, global);
goog.exportSymbol('proto.UIIODriverOutput', null, global);
goog.exportSymbol('proto.UIIORawOutput', null, global);
goog.exportSymbol('proto.UIIOStructuredInput', null, global);
goog.exportSymbol('proto.UIIOStructuredOutput', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NewSessionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NewSessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NewSessionRequest.displayName = 'proto.NewSessionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NewSessionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NewSessionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NewSessionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewSessionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    binary: jspb.Message.getFieldWithDefault(msg, 1, ""),
    script: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NewSessionRequest}
 */
proto.NewSessionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NewSessionRequest;
  return proto.NewSessionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NewSessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NewSessionRequest}
 */
proto.NewSessionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBinary(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NewSessionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NewSessionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NewSessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewSessionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBinary();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScript();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string binary = 1;
 * @return {string}
 */
proto.NewSessionRequest.prototype.getBinary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NewSessionRequest.prototype.setBinary = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string script = 2;
 * @return {string}
 */
proto.NewSessionRequest.prototype.getScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.NewSessionRequest.prototype.setScript = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NewSessionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NewSessionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NewSessionResponse.displayName = 'proto.NewSessionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NewSessionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.NewSessionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NewSessionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewSessionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NewSessionResponse}
 */
proto.NewSessionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NewSessionResponse;
  return proto.NewSessionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NewSessionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NewSessionResponse}
 */
proto.NewSessionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NewSessionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NewSessionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NewSessionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewSessionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.NewSessionResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NewSessionResponse.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOServerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.IOServerRequest.oneofGroups_);
};
goog.inherits(proto.IOServerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOServerRequest.displayName = 'proto.IOServerRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.IOServerRequest.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.IOServerRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  START_ID: 1,
  READ: 2,
  WRITE: 3,
  SYNC: 4
};

/**
 * @return {proto.IOServerRequest.RequestCase}
 */
proto.IOServerRequest.prototype.getRequestCase = function() {
  return /** @type {proto.IOServerRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.IOServerRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOServerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.IOServerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOServerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOServerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    startId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    read: (f = msg.getRead()) && proto.IOConsumer.toObject(includeInstance, f),
    write: (f = msg.getWrite()) && proto.IOProducer.toObject(includeInstance, f),
    sync: (f = msg.getSync()) && proto.IOConsumerSync.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOServerRequest}
 */
proto.IOServerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOServerRequest;
  return proto.IOServerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOServerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOServerRequest}
 */
proto.IOServerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartId(value);
      break;
    case 2:
      var value = new proto.IOConsumer;
      reader.readMessage(value,proto.IOConsumer.deserializeBinaryFromReader);
      msg.setRead(value);
      break;
    case 3:
      var value = new proto.IOProducer;
      reader.readMessage(value,proto.IOProducer.deserializeBinaryFromReader);
      msg.setWrite(value);
      break;
    case 4:
      var value = new proto.IOConsumerSync;
      reader.readMessage(value,proto.IOConsumerSync.deserializeBinaryFromReader);
      msg.setSync(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOServerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOServerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOServerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOServerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRead();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.IOConsumer.serializeBinaryToWriter
    );
  }
  f = message.getWrite();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.IOProducer.serializeBinaryToWriter
    );
  }
  f = message.getSync();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.IOConsumerSync.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 start_id = 1;
 * @return {number}
 */
proto.IOServerRequest.prototype.getStartId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IOServerRequest.prototype.setStartId = function(value) {
  jspb.Message.setOneofField(this, 1, proto.IOServerRequest.oneofGroups_[0], value);
};


proto.IOServerRequest.prototype.clearStartId = function() {
  jspb.Message.setOneofField(this, 1, proto.IOServerRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOServerRequest.prototype.hasStartId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IOConsumer read = 2;
 * @return {?proto.IOConsumer}
 */
proto.IOServerRequest.prototype.getRead = function() {
  return /** @type{?proto.IOConsumer} */ (
    jspb.Message.getWrapperField(this, proto.IOConsumer, 2));
};


/** @param {?proto.IOConsumer|undefined} value */
proto.IOServerRequest.prototype.setRead = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.IOServerRequest.oneofGroups_[0], value);
};


proto.IOServerRequest.prototype.clearRead = function() {
  this.setRead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOServerRequest.prototype.hasRead = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional IOProducer write = 3;
 * @return {?proto.IOProducer}
 */
proto.IOServerRequest.prototype.getWrite = function() {
  return /** @type{?proto.IOProducer} */ (
    jspb.Message.getWrapperField(this, proto.IOProducer, 3));
};


/** @param {?proto.IOProducer|undefined} value */
proto.IOServerRequest.prototype.setWrite = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.IOServerRequest.oneofGroups_[0], value);
};


proto.IOServerRequest.prototype.clearWrite = function() {
  this.setWrite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOServerRequest.prototype.hasWrite = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional IOConsumerSync sync = 4;
 * @return {?proto.IOConsumerSync}
 */
proto.IOServerRequest.prototype.getSync = function() {
  return /** @type{?proto.IOConsumerSync} */ (
    jspb.Message.getWrapperField(this, proto.IOConsumerSync, 4));
};


/** @param {?proto.IOConsumerSync|undefined} value */
proto.IOServerRequest.prototype.setSync = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.IOServerRequest.oneofGroups_[0], value);
};


proto.IOServerRequest.prototype.clearSync = function() {
  this.setSync(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOServerRequest.prototype.hasSync = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOConsumer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.IOConsumer.oneofGroups_);
};
goog.inherits(proto.IOConsumer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOConsumer.displayName = 'proto.IOConsumer';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.IOConsumer.oneofGroups_ = [[3,4,5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.IOConsumer.ConsumerCase = {
  CONSUMER_NOT_SET: 0,
  ANY: 3,
  LINE: 4,
  REGEX: 5,
  LITERAL: 6,
  NCHARS: 7,
  NUMBER: 8,
  CHAIN: 9,
  ONEOF: 10,
  PEEK: 11
};

/**
 * @return {proto.IOConsumer.ConsumerCase}
 */
proto.IOConsumer.prototype.getConsumerCase = function() {
  return /** @type {proto.IOConsumer.ConsumerCase} */(jspb.Message.computeOneofCase(this, proto.IOConsumer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOConsumer.prototype.toObject = function(opt_includeInstance) {
  return proto.IOConsumer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOConsumer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    interp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    any: (f = msg.getAny()) && proto.IOConsumer.Any.toObject(includeInstance, f),
    line: (f = msg.getLine()) && proto.IOConsumer.Line.toObject(includeInstance, f),
    regex: (f = msg.getRegex()) && proto.IOConsumer.Regex.toObject(includeInstance, f),
    literal: (f = msg.getLiteral()) && proto.IOConsumer.Literal.toObject(includeInstance, f),
    nchars: (f = msg.getNchars()) && proto.IOConsumer.NChars.toObject(includeInstance, f),
    number: (f = msg.getNumber()) && proto.IOConsumer.Number.toObject(includeInstance, f),
    chain: (f = msg.getChain()) && proto.IOConsumer.Chain.toObject(includeInstance, f),
    oneof: (f = msg.getOneof()) && proto.IOConsumer.OneOf.toObject(includeInstance, f),
    peek: (f = msg.getPeek()) && proto.IOConsumer.Peek.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOConsumer}
 */
proto.IOConsumer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOConsumer;
  return proto.IOConsumer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOConsumer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOConsumer}
 */
proto.IOConsumer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {!proto.IOConsumerInterpretation} */ (reader.readEnum());
      msg.setInterp(value);
      break;
    case 3:
      var value = new proto.IOConsumer.Any;
      reader.readMessage(value,proto.IOConsumer.Any.deserializeBinaryFromReader);
      msg.setAny(value);
      break;
    case 4:
      var value = new proto.IOConsumer.Line;
      reader.readMessage(value,proto.IOConsumer.Line.deserializeBinaryFromReader);
      msg.setLine(value);
      break;
    case 5:
      var value = new proto.IOConsumer.Regex;
      reader.readMessage(value,proto.IOConsumer.Regex.deserializeBinaryFromReader);
      msg.setRegex(value);
      break;
    case 6:
      var value = new proto.IOConsumer.Literal;
      reader.readMessage(value,proto.IOConsumer.Literal.deserializeBinaryFromReader);
      msg.setLiteral(value);
      break;
    case 7:
      var value = new proto.IOConsumer.NChars;
      reader.readMessage(value,proto.IOConsumer.NChars.deserializeBinaryFromReader);
      msg.setNchars(value);
      break;
    case 8:
      var value = new proto.IOConsumer.Number;
      reader.readMessage(value,proto.IOConsumer.Number.deserializeBinaryFromReader);
      msg.setNumber(value);
      break;
    case 9:
      var value = new proto.IOConsumer.Chain;
      reader.readMessage(value,proto.IOConsumer.Chain.deserializeBinaryFromReader);
      msg.setChain(value);
      break;
    case 10:
      var value = new proto.IOConsumer.OneOf;
      reader.readMessage(value,proto.IOConsumer.OneOf.deserializeBinaryFromReader);
      msg.setOneof(value);
      break;
    case 11:
      var value = new proto.IOConsumer.Peek;
      reader.readMessage(value,proto.IOConsumer.Peek.deserializeBinaryFromReader);
      msg.setPeek(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOConsumer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOConsumer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOConsumer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInterp();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAny();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.IOConsumer.Any.serializeBinaryToWriter
    );
  }
  f = message.getLine();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.IOConsumer.Line.serializeBinaryToWriter
    );
  }
  f = message.getRegex();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.IOConsumer.Regex.serializeBinaryToWriter
    );
  }
  f = message.getLiteral();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.IOConsumer.Literal.serializeBinaryToWriter
    );
  }
  f = message.getNchars();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.IOConsumer.NChars.serializeBinaryToWriter
    );
  }
  f = message.getNumber();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.IOConsumer.Number.serializeBinaryToWriter
    );
  }
  f = message.getChain();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.IOConsumer.Chain.serializeBinaryToWriter
    );
  }
  f = message.getOneof();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.IOConsumer.OneOf.serializeBinaryToWriter
    );
  }
  f = message.getPeek();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.IOConsumer.Peek.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOConsumer.Any = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOConsumer.Any, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOConsumer.Any.displayName = 'proto.IOConsumer.Any';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOConsumer.Any.prototype.toObject = function(opt_includeInstance) {
  return proto.IOConsumer.Any.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOConsumer.Any} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.Any.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOConsumer.Any}
 */
proto.IOConsumer.Any.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOConsumer.Any;
  return proto.IOConsumer.Any.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOConsumer.Any} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOConsumer.Any}
 */
proto.IOConsumer.Any.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOConsumer.Any.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOConsumer.Any.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOConsumer.Any} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.Any.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOConsumer.Line = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOConsumer.Line, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOConsumer.Line.displayName = 'proto.IOConsumer.Line';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOConsumer.Line.prototype.toObject = function(opt_includeInstance) {
  return proto.IOConsumer.Line.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOConsumer.Line} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.Line.toObject = function(includeInstance, msg) {
  var f, obj = {
    predicate: (f = msg.getPredicate()) && proto.IOConsumer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOConsumer.Line}
 */
proto.IOConsumer.Line.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOConsumer.Line;
  return proto.IOConsumer.Line.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOConsumer.Line} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOConsumer.Line}
 */
proto.IOConsumer.Line.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IOConsumer;
      reader.readMessage(value,proto.IOConsumer.deserializeBinaryFromReader);
      msg.setPredicate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOConsumer.Line.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOConsumer.Line.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOConsumer.Line} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.Line.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPredicate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.IOConsumer.serializeBinaryToWriter
    );
  }
};


/**
 * optional IOConsumer predicate = 1;
 * @return {?proto.IOConsumer}
 */
proto.IOConsumer.Line.prototype.getPredicate = function() {
  return /** @type{?proto.IOConsumer} */ (
    jspb.Message.getWrapperField(this, proto.IOConsumer, 1));
};


/** @param {?proto.IOConsumer|undefined} value */
proto.IOConsumer.Line.prototype.setPredicate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.IOConsumer.Line.prototype.clearPredicate = function() {
  this.setPredicate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOConsumer.Line.prototype.hasPredicate = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOConsumer.Regex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IOConsumer.Regex.repeatedFields_, null);
};
goog.inherits(proto.IOConsumer.Regex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOConsumer.Regex.displayName = 'proto.IOConsumer.Regex';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IOConsumer.Regex.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOConsumer.Regex.prototype.toObject = function(opt_includeInstance) {
  return proto.IOConsumer.Regex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOConsumer.Regex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.Regex.toObject = function(includeInstance, msg) {
  var f, obj = {
    regex: jspb.Message.getFieldWithDefault(msg, 1, ""),
    groupInterpList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOConsumer.Regex}
 */
proto.IOConsumer.Regex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOConsumer.Regex;
  return proto.IOConsumer.Regex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOConsumer.Regex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOConsumer.Regex}
 */
proto.IOConsumer.Regex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegex(value);
      break;
    case 2:
      var value = /** @type {!Array<!proto.IOConsumerInterpretation>} */ (reader.readPackedEnum());
      msg.setGroupInterpList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOConsumer.Regex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOConsumer.Regex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOConsumer.Regex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.Regex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupInterpList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * optional string regex = 1;
 * @return {string}
 */
proto.IOConsumer.Regex.prototype.getRegex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.IOConsumer.Regex.prototype.setRegex = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated IOConsumerInterpretation group_interp = 2;
 * @return {!Array<!proto.IOConsumerInterpretation>}
 */
proto.IOConsumer.Regex.prototype.getGroupInterpList = function() {
  return /** @type {!Array<!proto.IOConsumerInterpretation>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<!proto.IOConsumerInterpretation>} value */
proto.IOConsumer.Regex.prototype.setGroupInterpList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.IOConsumerInterpretation} value
 * @param {number=} opt_index
 */
proto.IOConsumer.Regex.prototype.addGroupInterp = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.IOConsumer.Regex.prototype.clearGroupInterpList = function() {
  this.setGroupInterpList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOConsumer.Literal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOConsumer.Literal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOConsumer.Literal.displayName = 'proto.IOConsumer.Literal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOConsumer.Literal.prototype.toObject = function(opt_includeInstance) {
  return proto.IOConsumer.Literal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOConsumer.Literal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.Literal.toObject = function(includeInstance, msg) {
  var f, obj = {
    literal: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOConsumer.Literal}
 */
proto.IOConsumer.Literal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOConsumer.Literal;
  return proto.IOConsumer.Literal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOConsumer.Literal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOConsumer.Literal}
 */
proto.IOConsumer.Literal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiteral(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOConsumer.Literal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOConsumer.Literal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOConsumer.Literal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.Literal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLiteral();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string literal = 1;
 * @return {string}
 */
proto.IOConsumer.Literal.prototype.getLiteral = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.IOConsumer.Literal.prototype.setLiteral = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOConsumer.NChars = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOConsumer.NChars, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOConsumer.NChars.displayName = 'proto.IOConsumer.NChars';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOConsumer.NChars.prototype.toObject = function(opt_includeInstance) {
  return proto.IOConsumer.NChars.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOConsumer.NChars} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.NChars.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: jspb.Message.getFieldWithDefault(msg, 1, 0),
    max: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOConsumer.NChars}
 */
proto.IOConsumer.NChars.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOConsumer.NChars;
  return proto.IOConsumer.NChars.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOConsumer.NChars} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOConsumer.NChars}
 */
proto.IOConsumer.NChars.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOConsumer.NChars.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOConsumer.NChars.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOConsumer.NChars} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.NChars.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMin();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 min = 1;
 * @return {number}
 */
proto.IOConsumer.NChars.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IOConsumer.NChars.prototype.setMin = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 max = 2;
 * @return {number}
 */
proto.IOConsumer.NChars.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IOConsumer.NChars.prototype.setMax = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOConsumer.Number = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOConsumer.Number, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOConsumer.Number.displayName = 'proto.IOConsumer.Number';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOConsumer.Number.prototype.toObject = function(opt_includeInstance) {
  return proto.IOConsumer.Number.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOConsumer.Number} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.Number.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOConsumer.Number}
 */
proto.IOConsumer.Number.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOConsumer.Number;
  return proto.IOConsumer.Number.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOConsumer.Number} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOConsumer.Number}
 */
proto.IOConsumer.Number.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOConsumer.Number.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOConsumer.Number.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOConsumer.Number} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.Number.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOConsumer.Chain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IOConsumer.Chain.repeatedFields_, null);
};
goog.inherits(proto.IOConsumer.Chain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOConsumer.Chain.displayName = 'proto.IOConsumer.Chain';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IOConsumer.Chain.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOConsumer.Chain.prototype.toObject = function(opt_includeInstance) {
  return proto.IOConsumer.Chain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOConsumer.Chain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.Chain.toObject = function(includeInstance, msg) {
  var f, obj = {
    consumersList: jspb.Message.toObjectList(msg.getConsumersList(),
    proto.IOConsumer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOConsumer.Chain}
 */
proto.IOConsumer.Chain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOConsumer.Chain;
  return proto.IOConsumer.Chain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOConsumer.Chain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOConsumer.Chain}
 */
proto.IOConsumer.Chain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IOConsumer;
      reader.readMessage(value,proto.IOConsumer.deserializeBinaryFromReader);
      msg.addConsumers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOConsumer.Chain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOConsumer.Chain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOConsumer.Chain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.Chain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsumersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.IOConsumer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IOConsumer consumers = 1;
 * @return {!Array<!proto.IOConsumer>}
 */
proto.IOConsumer.Chain.prototype.getConsumersList = function() {
  return /** @type{!Array<!proto.IOConsumer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IOConsumer, 1));
};


/** @param {!Array<!proto.IOConsumer>} value */
proto.IOConsumer.Chain.prototype.setConsumersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IOConsumer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IOConsumer}
 */
proto.IOConsumer.Chain.prototype.addConsumers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IOConsumer, opt_index);
};


proto.IOConsumer.Chain.prototype.clearConsumersList = function() {
  this.setConsumersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOConsumer.OneOf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IOConsumer.OneOf.repeatedFields_, null);
};
goog.inherits(proto.IOConsumer.OneOf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOConsumer.OneOf.displayName = 'proto.IOConsumer.OneOf';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IOConsumer.OneOf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOConsumer.OneOf.prototype.toObject = function(opt_includeInstance) {
  return proto.IOConsumer.OneOf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOConsumer.OneOf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.OneOf.toObject = function(includeInstance, msg) {
  var f, obj = {
    consumersList: jspb.Message.toObjectList(msg.getConsumersList(),
    proto.IOConsumer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOConsumer.OneOf}
 */
proto.IOConsumer.OneOf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOConsumer.OneOf;
  return proto.IOConsumer.OneOf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOConsumer.OneOf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOConsumer.OneOf}
 */
proto.IOConsumer.OneOf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IOConsumer;
      reader.readMessage(value,proto.IOConsumer.deserializeBinaryFromReader);
      msg.addConsumers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOConsumer.OneOf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOConsumer.OneOf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOConsumer.OneOf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.OneOf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsumersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.IOConsumer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IOConsumer consumers = 1;
 * @return {!Array<!proto.IOConsumer>}
 */
proto.IOConsumer.OneOf.prototype.getConsumersList = function() {
  return /** @type{!Array<!proto.IOConsumer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IOConsumer, 1));
};


/** @param {!Array<!proto.IOConsumer>} value */
proto.IOConsumer.OneOf.prototype.setConsumersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IOConsumer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IOConsumer}
 */
proto.IOConsumer.OneOf.prototype.addConsumers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IOConsumer, opt_index);
};


proto.IOConsumer.OneOf.prototype.clearConsumersList = function() {
  this.setConsumersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOConsumer.Peek = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOConsumer.Peek, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOConsumer.Peek.displayName = 'proto.IOConsumer.Peek';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOConsumer.Peek.prototype.toObject = function(opt_includeInstance) {
  return proto.IOConsumer.Peek.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOConsumer.Peek} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.Peek.toObject = function(includeInstance, msg) {
  var f, obj = {
    inner: (f = msg.getInner()) && proto.IOConsumer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOConsumer.Peek}
 */
proto.IOConsumer.Peek.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOConsumer.Peek;
  return proto.IOConsumer.Peek.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOConsumer.Peek} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOConsumer.Peek}
 */
proto.IOConsumer.Peek.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IOConsumer;
      reader.readMessage(value,proto.IOConsumer.deserializeBinaryFromReader);
      msg.setInner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOConsumer.Peek.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOConsumer.Peek.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOConsumer.Peek} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumer.Peek.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.IOConsumer.serializeBinaryToWriter
    );
  }
};


/**
 * optional IOConsumer inner = 1;
 * @return {?proto.IOConsumer}
 */
proto.IOConsumer.Peek.prototype.getInner = function() {
  return /** @type{?proto.IOConsumer} */ (
    jspb.Message.getWrapperField(this, proto.IOConsumer, 1));
};


/** @param {?proto.IOConsumer|undefined} value */
proto.IOConsumer.Peek.prototype.setInner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.IOConsumer.Peek.prototype.clearInner = function() {
  this.setInner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOConsumer.Peek.prototype.hasInner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 chain_id = 1;
 * @return {number}
 */
proto.IOConsumer.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IOConsumer.prototype.setChainId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional IOConsumerInterpretation interp = 2;
 * @return {!proto.IOConsumerInterpretation}
 */
proto.IOConsumer.prototype.getInterp = function() {
  return /** @type {!proto.IOConsumerInterpretation} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.IOConsumerInterpretation} value */
proto.IOConsumer.prototype.setInterp = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Any any = 3;
 * @return {?proto.IOConsumer.Any}
 */
proto.IOConsumer.prototype.getAny = function() {
  return /** @type{?proto.IOConsumer.Any} */ (
    jspb.Message.getWrapperField(this, proto.IOConsumer.Any, 3));
};


/** @param {?proto.IOConsumer.Any|undefined} value */
proto.IOConsumer.prototype.setAny = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.IOConsumer.oneofGroups_[0], value);
};


proto.IOConsumer.prototype.clearAny = function() {
  this.setAny(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOConsumer.prototype.hasAny = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Line line = 4;
 * @return {?proto.IOConsumer.Line}
 */
proto.IOConsumer.prototype.getLine = function() {
  return /** @type{?proto.IOConsumer.Line} */ (
    jspb.Message.getWrapperField(this, proto.IOConsumer.Line, 4));
};


/** @param {?proto.IOConsumer.Line|undefined} value */
proto.IOConsumer.prototype.setLine = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.IOConsumer.oneofGroups_[0], value);
};


proto.IOConsumer.prototype.clearLine = function() {
  this.setLine(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOConsumer.prototype.hasLine = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Regex regex = 5;
 * @return {?proto.IOConsumer.Regex}
 */
proto.IOConsumer.prototype.getRegex = function() {
  return /** @type{?proto.IOConsumer.Regex} */ (
    jspb.Message.getWrapperField(this, proto.IOConsumer.Regex, 5));
};


/** @param {?proto.IOConsumer.Regex|undefined} value */
proto.IOConsumer.prototype.setRegex = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.IOConsumer.oneofGroups_[0], value);
};


proto.IOConsumer.prototype.clearRegex = function() {
  this.setRegex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOConsumer.prototype.hasRegex = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Literal literal = 6;
 * @return {?proto.IOConsumer.Literal}
 */
proto.IOConsumer.prototype.getLiteral = function() {
  return /** @type{?proto.IOConsumer.Literal} */ (
    jspb.Message.getWrapperField(this, proto.IOConsumer.Literal, 6));
};


/** @param {?proto.IOConsumer.Literal|undefined} value */
proto.IOConsumer.prototype.setLiteral = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.IOConsumer.oneofGroups_[0], value);
};


proto.IOConsumer.prototype.clearLiteral = function() {
  this.setLiteral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOConsumer.prototype.hasLiteral = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional NChars nchars = 7;
 * @return {?proto.IOConsumer.NChars}
 */
proto.IOConsumer.prototype.getNchars = function() {
  return /** @type{?proto.IOConsumer.NChars} */ (
    jspb.Message.getWrapperField(this, proto.IOConsumer.NChars, 7));
};


/** @param {?proto.IOConsumer.NChars|undefined} value */
proto.IOConsumer.prototype.setNchars = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.IOConsumer.oneofGroups_[0], value);
};


proto.IOConsumer.prototype.clearNchars = function() {
  this.setNchars(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOConsumer.prototype.hasNchars = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Number number = 8;
 * @return {?proto.IOConsumer.Number}
 */
proto.IOConsumer.prototype.getNumber = function() {
  return /** @type{?proto.IOConsumer.Number} */ (
    jspb.Message.getWrapperField(this, proto.IOConsumer.Number, 8));
};


/** @param {?proto.IOConsumer.Number|undefined} value */
proto.IOConsumer.prototype.setNumber = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.IOConsumer.oneofGroups_[0], value);
};


proto.IOConsumer.prototype.clearNumber = function() {
  this.setNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOConsumer.prototype.hasNumber = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Chain chain = 9;
 * @return {?proto.IOConsumer.Chain}
 */
proto.IOConsumer.prototype.getChain = function() {
  return /** @type{?proto.IOConsumer.Chain} */ (
    jspb.Message.getWrapperField(this, proto.IOConsumer.Chain, 9));
};


/** @param {?proto.IOConsumer.Chain|undefined} value */
proto.IOConsumer.prototype.setChain = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.IOConsumer.oneofGroups_[0], value);
};


proto.IOConsumer.prototype.clearChain = function() {
  this.setChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOConsumer.prototype.hasChain = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional OneOf oneof = 10;
 * @return {?proto.IOConsumer.OneOf}
 */
proto.IOConsumer.prototype.getOneof = function() {
  return /** @type{?proto.IOConsumer.OneOf} */ (
    jspb.Message.getWrapperField(this, proto.IOConsumer.OneOf, 10));
};


/** @param {?proto.IOConsumer.OneOf|undefined} value */
proto.IOConsumer.prototype.setOneof = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.IOConsumer.oneofGroups_[0], value);
};


proto.IOConsumer.prototype.clearOneof = function() {
  this.setOneof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOConsumer.prototype.hasOneof = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Peek peek = 11;
 * @return {?proto.IOConsumer.Peek}
 */
proto.IOConsumer.prototype.getPeek = function() {
  return /** @type{?proto.IOConsumer.Peek} */ (
    jspb.Message.getWrapperField(this, proto.IOConsumer.Peek, 11));
};


/** @param {?proto.IOConsumer.Peek|undefined} value */
proto.IOConsumer.prototype.setPeek = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.IOConsumer.oneofGroups_[0], value);
};


proto.IOConsumer.prototype.clearPeek = function() {
  this.setPeek(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOConsumer.prototype.hasPeek = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOProducer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.IOProducer.oneofGroups_);
};
goog.inherits(proto.IOProducer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOProducer.displayName = 'proto.IOProducer';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.IOProducer.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.IOProducer.ProducerCase = {
  PRODUCER_NOT_SET: 0,
  LITTLE_ENDIAN_NUMBER: 1,
  DECIMAL_NUMBER: 2,
  LITERAL: 3
};

/**
 * @return {proto.IOProducer.ProducerCase}
 */
proto.IOProducer.prototype.getProducerCase = function() {
  return /** @type {proto.IOProducer.ProducerCase} */(jspb.Message.computeOneofCase(this, proto.IOProducer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOProducer.prototype.toObject = function(opt_includeInstance) {
  return proto.IOProducer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOProducer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOProducer.toObject = function(includeInstance, msg) {
  var f, obj = {
    littleEndianNumber: (f = msg.getLittleEndianNumber()) && proto.IOProducer.LittleEndianNumber.toObject(includeInstance, f),
    decimalNumber: (f = msg.getDecimalNumber()) && proto.IOProducer.DecimalNumber.toObject(includeInstance, f),
    literal: (f = msg.getLiteral()) && proto.IOProducer.Literal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOProducer}
 */
proto.IOProducer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOProducer;
  return proto.IOProducer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOProducer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOProducer}
 */
proto.IOProducer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IOProducer.LittleEndianNumber;
      reader.readMessage(value,proto.IOProducer.LittleEndianNumber.deserializeBinaryFromReader);
      msg.setLittleEndianNumber(value);
      break;
    case 2:
      var value = new proto.IOProducer.DecimalNumber;
      reader.readMessage(value,proto.IOProducer.DecimalNumber.deserializeBinaryFromReader);
      msg.setDecimalNumber(value);
      break;
    case 3:
      var value = new proto.IOProducer.Literal;
      reader.readMessage(value,proto.IOProducer.Literal.deserializeBinaryFromReader);
      msg.setLiteral(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOProducer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOProducer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOProducer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOProducer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLittleEndianNumber();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.IOProducer.LittleEndianNumber.serializeBinaryToWriter
    );
  }
  f = message.getDecimalNumber();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.IOProducer.DecimalNumber.serializeBinaryToWriter
    );
  }
  f = message.getLiteral();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.IOProducer.Literal.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOProducer.LittleEndianNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOProducer.LittleEndianNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOProducer.LittleEndianNumber.displayName = 'proto.IOProducer.LittleEndianNumber';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOProducer.LittleEndianNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.IOProducer.LittleEndianNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOProducer.LittleEndianNumber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOProducer.LittleEndianNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOProducer.LittleEndianNumber}
 */
proto.IOProducer.LittleEndianNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOProducer.LittleEndianNumber;
  return proto.IOProducer.LittleEndianNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOProducer.LittleEndianNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOProducer.LittleEndianNumber}
 */
proto.IOProducer.LittleEndianNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOProducer.LittleEndianNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOProducer.LittleEndianNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOProducer.LittleEndianNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOProducer.LittleEndianNumber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 number = 1;
 * @return {number}
 */
proto.IOProducer.LittleEndianNumber.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IOProducer.LittleEndianNumber.prototype.setNumber = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 width = 2;
 * @return {number}
 */
proto.IOProducer.LittleEndianNumber.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IOProducer.LittleEndianNumber.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOProducer.DecimalNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOProducer.DecimalNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOProducer.DecimalNumber.displayName = 'proto.IOProducer.DecimalNumber';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOProducer.DecimalNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.IOProducer.DecimalNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOProducer.DecimalNumber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOProducer.DecimalNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOProducer.DecimalNumber}
 */
proto.IOProducer.DecimalNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOProducer.DecimalNumber;
  return proto.IOProducer.DecimalNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOProducer.DecimalNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOProducer.DecimalNumber}
 */
proto.IOProducer.DecimalNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOProducer.DecimalNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOProducer.DecimalNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOProducer.DecimalNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOProducer.DecimalNumber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 number = 1;
 * @return {number}
 */
proto.IOProducer.DecimalNumber.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IOProducer.DecimalNumber.prototype.setNumber = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOProducer.Literal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOProducer.Literal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOProducer.Literal.displayName = 'proto.IOProducer.Literal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOProducer.Literal.prototype.toObject = function(opt_includeInstance) {
  return proto.IOProducer.Literal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOProducer.Literal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOProducer.Literal.toObject = function(includeInstance, msg) {
  var f, obj = {
    literal: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOProducer.Literal}
 */
proto.IOProducer.Literal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOProducer.Literal;
  return proto.IOProducer.Literal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOProducer.Literal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOProducer.Literal}
 */
proto.IOProducer.Literal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiteral(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOProducer.Literal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOProducer.Literal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOProducer.Literal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOProducer.Literal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLiteral();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string literal = 1;
 * @return {string}
 */
proto.IOProducer.Literal.prototype.getLiteral = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.IOProducer.Literal.prototype.setLiteral = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional LittleEndianNumber little_endian_number = 1;
 * @return {?proto.IOProducer.LittleEndianNumber}
 */
proto.IOProducer.prototype.getLittleEndianNumber = function() {
  return /** @type{?proto.IOProducer.LittleEndianNumber} */ (
    jspb.Message.getWrapperField(this, proto.IOProducer.LittleEndianNumber, 1));
};


/** @param {?proto.IOProducer.LittleEndianNumber|undefined} value */
proto.IOProducer.prototype.setLittleEndianNumber = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.IOProducer.oneofGroups_[0], value);
};


proto.IOProducer.prototype.clearLittleEndianNumber = function() {
  this.setLittleEndianNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOProducer.prototype.hasLittleEndianNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DecimalNumber decimal_number = 2;
 * @return {?proto.IOProducer.DecimalNumber}
 */
proto.IOProducer.prototype.getDecimalNumber = function() {
  return /** @type{?proto.IOProducer.DecimalNumber} */ (
    jspb.Message.getWrapperField(this, proto.IOProducer.DecimalNumber, 2));
};


/** @param {?proto.IOProducer.DecimalNumber|undefined} value */
proto.IOProducer.prototype.setDecimalNumber = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.IOProducer.oneofGroups_[0], value);
};


proto.IOProducer.prototype.clearDecimalNumber = function() {
  this.setDecimalNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOProducer.prototype.hasDecimalNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Literal literal = 3;
 * @return {?proto.IOProducer.Literal}
 */
proto.IOProducer.prototype.getLiteral = function() {
  return /** @type{?proto.IOProducer.Literal} */ (
    jspb.Message.getWrapperField(this, proto.IOProducer.Literal, 3));
};


/** @param {?proto.IOProducer.Literal|undefined} value */
proto.IOProducer.prototype.setLiteral = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.IOProducer.oneofGroups_[0], value);
};


proto.IOProducer.prototype.clearLiteral = function() {
  this.setLiteral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOProducer.prototype.hasLiteral = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOConsumerSync = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOConsumerSync, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOConsumerSync.displayName = 'proto.IOConsumerSync';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOConsumerSync.prototype.toObject = function(opt_includeInstance) {
  return proto.IOConsumerSync.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOConsumerSync} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumerSync.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOConsumerSync}
 */
proto.IOConsumerSync.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOConsumerSync;
  return proto.IOConsumerSync.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOConsumerSync} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOConsumerSync}
 */
proto.IOConsumerSync.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChainId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOConsumerSync.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOConsumerSync.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOConsumerSync} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOConsumerSync.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 chain_id = 1;
 * @return {number}
 */
proto.IOConsumerSync.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IOConsumerSync.prototype.setChainId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOReadResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.IOReadResult.oneofGroups_);
};
goog.inherits(proto.IOReadResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOReadResult.displayName = 'proto.IOReadResult';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.IOReadResult.oneofGroups_ = [[2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.IOReadResult.DetailCase = {
  DETAIL_NOT_SET: 0,
  ANY: 2,
  LINE: 3,
  REGEX: 4,
  LITERAL: 5,
  NCHARS: 6,
  NUMBER: 7,
  CHAIN: 8,
  ONEOF: 9,
  PEEK: 10
};

/**
 * @return {proto.IOReadResult.DetailCase}
 */
proto.IOReadResult.prototype.getDetailCase = function() {
  return /** @type {proto.IOReadResult.DetailCase} */(jspb.Message.computeOneofCase(this, proto.IOReadResult.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOReadResult.prototype.toObject = function(opt_includeInstance) {
  return proto.IOReadResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOReadResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, ""),
    any: (f = msg.getAny()) && proto.IOReadResult.Any.toObject(includeInstance, f),
    line: (f = msg.getLine()) && proto.IOReadResult.Line.toObject(includeInstance, f),
    regex: (f = msg.getRegex()) && proto.IOReadResult.Regex.toObject(includeInstance, f),
    literal: (f = msg.getLiteral()) && proto.IOReadResult.Literal.toObject(includeInstance, f),
    nchars: (f = msg.getNchars()) && proto.IOReadResult.NChars.toObject(includeInstance, f),
    number: (f = msg.getNumber()) && proto.IOReadResult.Number.toObject(includeInstance, f),
    chain: (f = msg.getChain()) && proto.IOReadResult.Chain.toObject(includeInstance, f),
    oneof: (f = msg.getOneof()) && proto.IOReadResult.OneOf.toObject(includeInstance, f),
    peek: (f = msg.getPeek()) && proto.IOReadResult.Peek.toObject(includeInstance, f),
    charsConsumed: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOReadResult}
 */
proto.IOReadResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOReadResult;
  return proto.IOReadResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOReadResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOReadResult}
 */
proto.IOReadResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 2:
      var value = new proto.IOReadResult.Any;
      reader.readMessage(value,proto.IOReadResult.Any.deserializeBinaryFromReader);
      msg.setAny(value);
      break;
    case 3:
      var value = new proto.IOReadResult.Line;
      reader.readMessage(value,proto.IOReadResult.Line.deserializeBinaryFromReader);
      msg.setLine(value);
      break;
    case 4:
      var value = new proto.IOReadResult.Regex;
      reader.readMessage(value,proto.IOReadResult.Regex.deserializeBinaryFromReader);
      msg.setRegex(value);
      break;
    case 5:
      var value = new proto.IOReadResult.Literal;
      reader.readMessage(value,proto.IOReadResult.Literal.deserializeBinaryFromReader);
      msg.setLiteral(value);
      break;
    case 6:
      var value = new proto.IOReadResult.NChars;
      reader.readMessage(value,proto.IOReadResult.NChars.deserializeBinaryFromReader);
      msg.setNchars(value);
      break;
    case 7:
      var value = new proto.IOReadResult.Number;
      reader.readMessage(value,proto.IOReadResult.Number.deserializeBinaryFromReader);
      msg.setNumber(value);
      break;
    case 8:
      var value = new proto.IOReadResult.Chain;
      reader.readMessage(value,proto.IOReadResult.Chain.deserializeBinaryFromReader);
      msg.setChain(value);
      break;
    case 9:
      var value = new proto.IOReadResult.OneOf;
      reader.readMessage(value,proto.IOReadResult.OneOf.deserializeBinaryFromReader);
      msg.setOneof(value);
      break;
    case 10:
      var value = new proto.IOReadResult.Peek;
      reader.readMessage(value,proto.IOReadResult.Peek.deserializeBinaryFromReader);
      msg.setPeek(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCharsConsumed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOReadResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOReadResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOReadResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAny();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.IOReadResult.Any.serializeBinaryToWriter
    );
  }
  f = message.getLine();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.IOReadResult.Line.serializeBinaryToWriter
    );
  }
  f = message.getRegex();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.IOReadResult.Regex.serializeBinaryToWriter
    );
  }
  f = message.getLiteral();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.IOReadResult.Literal.serializeBinaryToWriter
    );
  }
  f = message.getNchars();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.IOReadResult.NChars.serializeBinaryToWriter
    );
  }
  f = message.getNumber();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.IOReadResult.Number.serializeBinaryToWriter
    );
  }
  f = message.getChain();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.IOReadResult.Chain.serializeBinaryToWriter
    );
  }
  f = message.getOneof();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.IOReadResult.OneOf.serializeBinaryToWriter
    );
  }
  f = message.getPeek();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.IOReadResult.Peek.serializeBinaryToWriter
    );
  }
  f = message.getCharsConsumed();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOReadResult.Any = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOReadResult.Any, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOReadResult.Any.displayName = 'proto.IOReadResult.Any';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOReadResult.Any.prototype.toObject = function(opt_includeInstance) {
  return proto.IOReadResult.Any.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOReadResult.Any} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.Any.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOReadResult.Any}
 */
proto.IOReadResult.Any.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOReadResult.Any;
  return proto.IOReadResult.Any.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOReadResult.Any} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOReadResult.Any}
 */
proto.IOReadResult.Any.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOReadResult.Any.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOReadResult.Any.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOReadResult.Any} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.Any.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOReadResult.Line = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOReadResult.Line, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOReadResult.Line.displayName = 'proto.IOReadResult.Line';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOReadResult.Line.prototype.toObject = function(opt_includeInstance) {
  return proto.IOReadResult.Line.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOReadResult.Line} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.Line.toObject = function(includeInstance, msg) {
  var f, obj = {
    inner: (f = msg.getInner()) && proto.IOReadResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOReadResult.Line}
 */
proto.IOReadResult.Line.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOReadResult.Line;
  return proto.IOReadResult.Line.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOReadResult.Line} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOReadResult.Line}
 */
proto.IOReadResult.Line.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IOReadResult;
      reader.readMessage(value,proto.IOReadResult.deserializeBinaryFromReader);
      msg.setInner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOReadResult.Line.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOReadResult.Line.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOReadResult.Line} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.Line.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.IOReadResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional IOReadResult inner = 1;
 * @return {?proto.IOReadResult}
 */
proto.IOReadResult.Line.prototype.getInner = function() {
  return /** @type{?proto.IOReadResult} */ (
    jspb.Message.getWrapperField(this, proto.IOReadResult, 1));
};


/** @param {?proto.IOReadResult|undefined} value */
proto.IOReadResult.Line.prototype.setInner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.IOReadResult.Line.prototype.clearInner = function() {
  this.setInner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOReadResult.Line.prototype.hasInner = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOReadResult.Regex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IOReadResult.Regex.repeatedFields_, null);
};
goog.inherits(proto.IOReadResult.Regex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOReadResult.Regex.displayName = 'proto.IOReadResult.Regex';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IOReadResult.Regex.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOReadResult.Regex.prototype.toObject = function(opt_includeInstance) {
  return proto.IOReadResult.Regex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOReadResult.Regex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.Regex.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOReadResult.Regex}
 */
proto.IOReadResult.Regex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOReadResult.Regex;
  return proto.IOReadResult.Regex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOReadResult.Regex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOReadResult.Regex}
 */
proto.IOReadResult.Regex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOReadResult.Regex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOReadResult.Regex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOReadResult.Regex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.Regex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string groups = 1;
 * @return {!Array<string>}
 */
proto.IOReadResult.Regex.prototype.getGroupsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.IOReadResult.Regex.prototype.setGroupsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.IOReadResult.Regex.prototype.addGroups = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.IOReadResult.Regex.prototype.clearGroupsList = function() {
  this.setGroupsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOReadResult.Literal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOReadResult.Literal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOReadResult.Literal.displayName = 'proto.IOReadResult.Literal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOReadResult.Literal.prototype.toObject = function(opt_includeInstance) {
  return proto.IOReadResult.Literal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOReadResult.Literal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.Literal.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOReadResult.Literal}
 */
proto.IOReadResult.Literal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOReadResult.Literal;
  return proto.IOReadResult.Literal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOReadResult.Literal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOReadResult.Literal}
 */
proto.IOReadResult.Literal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOReadResult.Literal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOReadResult.Literal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOReadResult.Literal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.Literal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOReadResult.NChars = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOReadResult.NChars, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOReadResult.NChars.displayName = 'proto.IOReadResult.NChars';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOReadResult.NChars.prototype.toObject = function(opt_includeInstance) {
  return proto.IOReadResult.NChars.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOReadResult.NChars} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.NChars.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOReadResult.NChars}
 */
proto.IOReadResult.NChars.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOReadResult.NChars;
  return proto.IOReadResult.NChars.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOReadResult.NChars} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOReadResult.NChars}
 */
proto.IOReadResult.NChars.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOReadResult.NChars.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOReadResult.NChars.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOReadResult.NChars} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.NChars.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOReadResult.Number = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOReadResult.Number, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOReadResult.Number.displayName = 'proto.IOReadResult.Number';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOReadResult.Number.prototype.toObject = function(opt_includeInstance) {
  return proto.IOReadResult.Number.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOReadResult.Number} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.Number.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOReadResult.Number}
 */
proto.IOReadResult.Number.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOReadResult.Number;
  return proto.IOReadResult.Number.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOReadResult.Number} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOReadResult.Number}
 */
proto.IOReadResult.Number.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOReadResult.Number.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOReadResult.Number.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOReadResult.Number} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.Number.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOReadResult.Chain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IOReadResult.Chain.repeatedFields_, null);
};
goog.inherits(proto.IOReadResult.Chain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOReadResult.Chain.displayName = 'proto.IOReadResult.Chain';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IOReadResult.Chain.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOReadResult.Chain.prototype.toObject = function(opt_includeInstance) {
  return proto.IOReadResult.Chain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOReadResult.Chain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.Chain.toObject = function(includeInstance, msg) {
  var f, obj = {
    innerList: jspb.Message.toObjectList(msg.getInnerList(),
    proto.IOReadResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOReadResult.Chain}
 */
proto.IOReadResult.Chain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOReadResult.Chain;
  return proto.IOReadResult.Chain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOReadResult.Chain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOReadResult.Chain}
 */
proto.IOReadResult.Chain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IOReadResult;
      reader.readMessage(value,proto.IOReadResult.deserializeBinaryFromReader);
      msg.addInner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOReadResult.Chain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOReadResult.Chain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOReadResult.Chain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.Chain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInnerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.IOReadResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IOReadResult inner = 1;
 * @return {!Array<!proto.IOReadResult>}
 */
proto.IOReadResult.Chain.prototype.getInnerList = function() {
  return /** @type{!Array<!proto.IOReadResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IOReadResult, 1));
};


/** @param {!Array<!proto.IOReadResult>} value */
proto.IOReadResult.Chain.prototype.setInnerList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IOReadResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IOReadResult}
 */
proto.IOReadResult.Chain.prototype.addInner = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IOReadResult, opt_index);
};


proto.IOReadResult.Chain.prototype.clearInnerList = function() {
  this.setInnerList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOReadResult.OneOf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOReadResult.OneOf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOReadResult.OneOf.displayName = 'proto.IOReadResult.OneOf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOReadResult.OneOf.prototype.toObject = function(opt_includeInstance) {
  return proto.IOReadResult.OneOf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOReadResult.OneOf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.OneOf.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inner: (f = msg.getInner()) && proto.IOReadResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOReadResult.OneOf}
 */
proto.IOReadResult.OneOf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOReadResult.OneOf;
  return proto.IOReadResult.OneOf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOReadResult.OneOf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOReadResult.OneOf}
 */
proto.IOReadResult.OneOf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.IOReadResult;
      reader.readMessage(value,proto.IOReadResult.deserializeBinaryFromReader);
      msg.setInner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOReadResult.OneOf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOReadResult.OneOf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOReadResult.OneOf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.OneOf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.IOReadResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.IOReadResult.OneOf.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IOReadResult.OneOf.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional IOReadResult inner = 2;
 * @return {?proto.IOReadResult}
 */
proto.IOReadResult.OneOf.prototype.getInner = function() {
  return /** @type{?proto.IOReadResult} */ (
    jspb.Message.getWrapperField(this, proto.IOReadResult, 2));
};


/** @param {?proto.IOReadResult|undefined} value */
proto.IOReadResult.OneOf.prototype.setInner = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.IOReadResult.OneOf.prototype.clearInner = function() {
  this.setInner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOReadResult.OneOf.prototype.hasInner = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOReadResult.Peek = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOReadResult.Peek, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOReadResult.Peek.displayName = 'proto.IOReadResult.Peek';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOReadResult.Peek.prototype.toObject = function(opt_includeInstance) {
  return proto.IOReadResult.Peek.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOReadResult.Peek} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.Peek.toObject = function(includeInstance, msg) {
  var f, obj = {
    inner: (f = msg.getInner()) && proto.IOReadResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOReadResult.Peek}
 */
proto.IOReadResult.Peek.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOReadResult.Peek;
  return proto.IOReadResult.Peek.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOReadResult.Peek} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOReadResult.Peek}
 */
proto.IOReadResult.Peek.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IOReadResult;
      reader.readMessage(value,proto.IOReadResult.deserializeBinaryFromReader);
      msg.setInner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOReadResult.Peek.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOReadResult.Peek.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOReadResult.Peek} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResult.Peek.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.IOReadResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional IOReadResult inner = 1;
 * @return {?proto.IOReadResult}
 */
proto.IOReadResult.Peek.prototype.getInner = function() {
  return /** @type{?proto.IOReadResult} */ (
    jspb.Message.getWrapperField(this, proto.IOReadResult, 1));
};


/** @param {?proto.IOReadResult|undefined} value */
proto.IOReadResult.Peek.prototype.setInner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.IOReadResult.Peek.prototype.clearInner = function() {
  this.setInner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOReadResult.Peek.prototype.hasInner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.IOReadResult.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.IOReadResult.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Any any = 2;
 * @return {?proto.IOReadResult.Any}
 */
proto.IOReadResult.prototype.getAny = function() {
  return /** @type{?proto.IOReadResult.Any} */ (
    jspb.Message.getWrapperField(this, proto.IOReadResult.Any, 2));
};


/** @param {?proto.IOReadResult.Any|undefined} value */
proto.IOReadResult.prototype.setAny = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.IOReadResult.oneofGroups_[0], value);
};


proto.IOReadResult.prototype.clearAny = function() {
  this.setAny(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOReadResult.prototype.hasAny = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Line line = 3;
 * @return {?proto.IOReadResult.Line}
 */
proto.IOReadResult.prototype.getLine = function() {
  return /** @type{?proto.IOReadResult.Line} */ (
    jspb.Message.getWrapperField(this, proto.IOReadResult.Line, 3));
};


/** @param {?proto.IOReadResult.Line|undefined} value */
proto.IOReadResult.prototype.setLine = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.IOReadResult.oneofGroups_[0], value);
};


proto.IOReadResult.prototype.clearLine = function() {
  this.setLine(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOReadResult.prototype.hasLine = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Regex regex = 4;
 * @return {?proto.IOReadResult.Regex}
 */
proto.IOReadResult.prototype.getRegex = function() {
  return /** @type{?proto.IOReadResult.Regex} */ (
    jspb.Message.getWrapperField(this, proto.IOReadResult.Regex, 4));
};


/** @param {?proto.IOReadResult.Regex|undefined} value */
proto.IOReadResult.prototype.setRegex = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.IOReadResult.oneofGroups_[0], value);
};


proto.IOReadResult.prototype.clearRegex = function() {
  this.setRegex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOReadResult.prototype.hasRegex = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Literal literal = 5;
 * @return {?proto.IOReadResult.Literal}
 */
proto.IOReadResult.prototype.getLiteral = function() {
  return /** @type{?proto.IOReadResult.Literal} */ (
    jspb.Message.getWrapperField(this, proto.IOReadResult.Literal, 5));
};


/** @param {?proto.IOReadResult.Literal|undefined} value */
proto.IOReadResult.prototype.setLiteral = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.IOReadResult.oneofGroups_[0], value);
};


proto.IOReadResult.prototype.clearLiteral = function() {
  this.setLiteral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOReadResult.prototype.hasLiteral = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional NChars nchars = 6;
 * @return {?proto.IOReadResult.NChars}
 */
proto.IOReadResult.prototype.getNchars = function() {
  return /** @type{?proto.IOReadResult.NChars} */ (
    jspb.Message.getWrapperField(this, proto.IOReadResult.NChars, 6));
};


/** @param {?proto.IOReadResult.NChars|undefined} value */
proto.IOReadResult.prototype.setNchars = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.IOReadResult.oneofGroups_[0], value);
};


proto.IOReadResult.prototype.clearNchars = function() {
  this.setNchars(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOReadResult.prototype.hasNchars = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Number number = 7;
 * @return {?proto.IOReadResult.Number}
 */
proto.IOReadResult.prototype.getNumber = function() {
  return /** @type{?proto.IOReadResult.Number} */ (
    jspb.Message.getWrapperField(this, proto.IOReadResult.Number, 7));
};


/** @param {?proto.IOReadResult.Number|undefined} value */
proto.IOReadResult.prototype.setNumber = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.IOReadResult.oneofGroups_[0], value);
};


proto.IOReadResult.prototype.clearNumber = function() {
  this.setNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOReadResult.prototype.hasNumber = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Chain chain = 8;
 * @return {?proto.IOReadResult.Chain}
 */
proto.IOReadResult.prototype.getChain = function() {
  return /** @type{?proto.IOReadResult.Chain} */ (
    jspb.Message.getWrapperField(this, proto.IOReadResult.Chain, 8));
};


/** @param {?proto.IOReadResult.Chain|undefined} value */
proto.IOReadResult.prototype.setChain = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.IOReadResult.oneofGroups_[0], value);
};


proto.IOReadResult.prototype.clearChain = function() {
  this.setChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOReadResult.prototype.hasChain = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional OneOf oneof = 9;
 * @return {?proto.IOReadResult.OneOf}
 */
proto.IOReadResult.prototype.getOneof = function() {
  return /** @type{?proto.IOReadResult.OneOf} */ (
    jspb.Message.getWrapperField(this, proto.IOReadResult.OneOf, 9));
};


/** @param {?proto.IOReadResult.OneOf|undefined} value */
proto.IOReadResult.prototype.setOneof = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.IOReadResult.oneofGroups_[0], value);
};


proto.IOReadResult.prototype.clearOneof = function() {
  this.setOneof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOReadResult.prototype.hasOneof = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Peek peek = 10;
 * @return {?proto.IOReadResult.Peek}
 */
proto.IOReadResult.prototype.getPeek = function() {
  return /** @type{?proto.IOReadResult.Peek} */ (
    jspb.Message.getWrapperField(this, proto.IOReadResult.Peek, 10));
};


/** @param {?proto.IOReadResult.Peek|undefined} value */
proto.IOReadResult.prototype.setPeek = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.IOReadResult.oneofGroups_[0], value);
};


proto.IOReadResult.prototype.clearPeek = function() {
  this.setPeek(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOReadResult.prototype.hasPeek = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 chars_consumed = 11;
 * @return {number}
 */
proto.IOReadResult.prototype.getCharsConsumed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.IOReadResult.prototype.setCharsConsumed = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOServerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.IOServerResponse.oneofGroups_);
};
goog.inherits(proto.IOServerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOServerResponse.displayName = 'proto.IOServerResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.IOServerResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.IOServerResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  ACK: 1,
  RESULT: 2
};

/**
 * @return {proto.IOServerResponse.ResponseCase}
 */
proto.IOServerResponse.prototype.getResponseCase = function() {
  return /** @type {proto.IOServerResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.IOServerResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOServerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.IOServerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOServerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOServerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ack: jspb.Message.getFieldWithDefault(msg, 1, false),
    result: (f = msg.getResult()) && proto.IOReadResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOServerResponse}
 */
proto.IOServerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOServerResponse;
  return proto.IOServerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOServerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOServerResponse}
 */
proto.IOServerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAck(value);
      break;
    case 2:
      var value = new proto.IOReadResult;
      reader.readMessage(value,proto.IOReadResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOServerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOServerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOServerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOServerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.IOReadResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool ack = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.IOServerResponse.prototype.getAck = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.IOServerResponse.prototype.setAck = function(value) {
  jspb.Message.setOneofField(this, 1, proto.IOServerResponse.oneofGroups_[0], value);
};


proto.IOServerResponse.prototype.clearAck = function() {
  jspb.Message.setOneofField(this, 1, proto.IOServerResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOServerResponse.prototype.hasAck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IOReadResult result = 2;
 * @return {?proto.IOReadResult}
 */
proto.IOServerResponse.prototype.getResult = function() {
  return /** @type{?proto.IOReadResult} */ (
    jspb.Message.getWrapperField(this, proto.IOReadResult, 2));
};


/** @param {?proto.IOReadResult|undefined} value */
proto.IOServerResponse.prototype.setResult = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.IOServerResponse.oneofGroups_[0], value);
};


proto.IOServerResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOServerResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UIIODataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UIIODataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UIIODataRequest.displayName = 'proto.UIIODataRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UIIODataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UIIODataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UIIODataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIODataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UIIODataRequest}
 */
proto.UIIODataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UIIODataRequest;
  return proto.UIIODataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UIIODataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UIIODataRequest}
 */
proto.UIIODataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UIIODataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UIIODataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UIIODataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIODataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 session_id = 1;
 * @return {number}
 */
proto.UIIODataRequest.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UIIODataRequest.prototype.setSessionId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UIIODataUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UIIODataUpdate.oneofGroups_);
};
goog.inherits(proto.UIIODataUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UIIODataUpdate.displayName = 'proto.UIIODataUpdate';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UIIODataUpdate.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.UIIODataUpdate.KindCase = {
  KIND_NOT_SET: 0,
  DRIVER_OUTPUT: 2,
  RAW_OUTPUT: 3,
  STRUCTURED_OUTPUT: 4,
  INPUT: 5
};

/**
 * @return {proto.UIIODataUpdate.KindCase}
 */
proto.UIIODataUpdate.prototype.getKindCase = function() {
  return /** @type {proto.UIIODataUpdate.KindCase} */(jspb.Message.computeOneofCase(this, proto.UIIODataUpdate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UIIODataUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.UIIODataUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UIIODataUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIODataUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    driverOutput: (f = msg.getDriverOutput()) && proto.UIIODriverOutput.toObject(includeInstance, f),
    rawOutput: (f = msg.getRawOutput()) && proto.UIIORawOutput.toObject(includeInstance, f),
    structuredOutput: (f = msg.getStructuredOutput()) && proto.UIIOStructuredOutput.toObject(includeInstance, f),
    input: (f = msg.getInput()) && proto.UIIOStructuredInput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UIIODataUpdate}
 */
proto.UIIODataUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UIIODataUpdate;
  return proto.UIIODataUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UIIODataUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UIIODataUpdate}
 */
proto.UIIODataUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.UIIODriverOutput;
      reader.readMessage(value,proto.UIIODriverOutput.deserializeBinaryFromReader);
      msg.setDriverOutput(value);
      break;
    case 3:
      var value = new proto.UIIORawOutput;
      reader.readMessage(value,proto.UIIORawOutput.deserializeBinaryFromReader);
      msg.setRawOutput(value);
      break;
    case 4:
      var value = new proto.UIIOStructuredOutput;
      reader.readMessage(value,proto.UIIOStructuredOutput.deserializeBinaryFromReader);
      msg.setStructuredOutput(value);
      break;
    case 5:
      var value = new proto.UIIOStructuredInput;
      reader.readMessage(value,proto.UIIOStructuredInput.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UIIODataUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UIIODataUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UIIODataUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIODataUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDriverOutput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.UIIODriverOutput.serializeBinaryToWriter
    );
  }
  f = message.getRawOutput();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.UIIORawOutput.serializeBinaryToWriter
    );
  }
  f = message.getStructuredOutput();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.UIIOStructuredOutput.serializeBinaryToWriter
    );
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.UIIOStructuredInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.UIIODataUpdate.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UIIODataUpdate.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional UIIODriverOutput driver_output = 2;
 * @return {?proto.UIIODriverOutput}
 */
proto.UIIODataUpdate.prototype.getDriverOutput = function() {
  return /** @type{?proto.UIIODriverOutput} */ (
    jspb.Message.getWrapperField(this, proto.UIIODriverOutput, 2));
};


/** @param {?proto.UIIODriverOutput|undefined} value */
proto.UIIODataUpdate.prototype.setDriverOutput = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.UIIODataUpdate.oneofGroups_[0], value);
};


proto.UIIODataUpdate.prototype.clearDriverOutput = function() {
  this.setDriverOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UIIODataUpdate.prototype.hasDriverOutput = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UIIORawOutput raw_output = 3;
 * @return {?proto.UIIORawOutput}
 */
proto.UIIODataUpdate.prototype.getRawOutput = function() {
  return /** @type{?proto.UIIORawOutput} */ (
    jspb.Message.getWrapperField(this, proto.UIIORawOutput, 3));
};


/** @param {?proto.UIIORawOutput|undefined} value */
proto.UIIODataUpdate.prototype.setRawOutput = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.UIIODataUpdate.oneofGroups_[0], value);
};


proto.UIIODataUpdate.prototype.clearRawOutput = function() {
  this.setRawOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UIIODataUpdate.prototype.hasRawOutput = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UIIOStructuredOutput structured_output = 4;
 * @return {?proto.UIIOStructuredOutput}
 */
proto.UIIODataUpdate.prototype.getStructuredOutput = function() {
  return /** @type{?proto.UIIOStructuredOutput} */ (
    jspb.Message.getWrapperField(this, proto.UIIOStructuredOutput, 4));
};


/** @param {?proto.UIIOStructuredOutput|undefined} value */
proto.UIIODataUpdate.prototype.setStructuredOutput = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.UIIODataUpdate.oneofGroups_[0], value);
};


proto.UIIODataUpdate.prototype.clearStructuredOutput = function() {
  this.setStructuredOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UIIODataUpdate.prototype.hasStructuredOutput = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UIIOStructuredInput input = 5;
 * @return {?proto.UIIOStructuredInput}
 */
proto.UIIODataUpdate.prototype.getInput = function() {
  return /** @type{?proto.UIIOStructuredInput} */ (
    jspb.Message.getWrapperField(this, proto.UIIOStructuredInput, 5));
};


/** @param {?proto.UIIOStructuredInput|undefined} value */
proto.UIIODataUpdate.prototype.setInput = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.UIIODataUpdate.oneofGroups_[0], value);
};


proto.UIIODataUpdate.prototype.clearInput = function() {
  this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UIIODataUpdate.prototype.hasInput = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UIIODriverOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UIIODriverOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UIIODriverOutput.displayName = 'proto.UIIODriverOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UIIODriverOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.UIIODriverOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UIIODriverOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIODriverOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    isStderr: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UIIODriverOutput}
 */
proto.UIIODriverOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UIIODriverOutput;
  return proto.UIIODriverOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UIIODriverOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UIIODriverOutput}
 */
proto.UIIODriverOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsStderr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UIIODriverOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UIIODriverOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UIIODriverOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIODriverOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIsStderr();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {string}
 */
proto.UIIODriverOutput.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.UIIODriverOutput.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.UIIODriverOutput.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.UIIODriverOutput.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool is_stderr = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.UIIODriverOutput.prototype.getIsStderr = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.UIIODriverOutput.prototype.setIsStderr = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UIIORawOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UIIORawOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UIIORawOutput.displayName = 'proto.UIIORawOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UIIORawOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.UIIORawOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UIIORawOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIORawOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    isStderr: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UIIORawOutput}
 */
proto.UIIORawOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UIIORawOutput;
  return proto.UIIORawOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UIIORawOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UIIORawOutput}
 */
proto.UIIORawOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsStderr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UIIORawOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UIIORawOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UIIORawOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIORawOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIsStderr();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {string}
 */
proto.UIIORawOutput.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.UIIORawOutput.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.UIIORawOutput.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.UIIORawOutput.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool is_stderr = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.UIIORawOutput.prototype.getIsStderr = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.UIIORawOutput.prototype.setIsStderr = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UIIOStructuredOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UIIOStructuredOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UIIOStructuredOutput.displayName = 'proto.UIIOStructuredOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UIIOStructuredOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.UIIOStructuredOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UIIOStructuredOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIOStructuredOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    req: (f = msg.getReq()) && proto.IOConsumer.toObject(includeInstance, f),
    progress: (f = msg.getProgress()) && proto.IOReadResult.toObject(includeInstance, f),
    complete: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UIIOStructuredOutput}
 */
proto.UIIOStructuredOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UIIOStructuredOutput;
  return proto.UIIOStructuredOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UIIOStructuredOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UIIOStructuredOutput}
 */
proto.UIIOStructuredOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChainId(value);
      break;
    case 2:
      var value = new proto.IOConsumer;
      reader.readMessage(value,proto.IOConsumer.deserializeBinaryFromReader);
      msg.setReq(value);
      break;
    case 3:
      var value = new proto.IOReadResult;
      reader.readMessage(value,proto.IOReadResult.deserializeBinaryFromReader);
      msg.setProgress(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setComplete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UIIOStructuredOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UIIOStructuredOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UIIOStructuredOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIOStructuredOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getReq();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.IOConsumer.serializeBinaryToWriter
    );
  }
  f = message.getProgress();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.IOReadResult.serializeBinaryToWriter
    );
  }
  f = message.getComplete();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int32 chain_id = 1;
 * @return {number}
 */
proto.UIIOStructuredOutput.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UIIOStructuredOutput.prototype.setChainId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional IOConsumer req = 2;
 * @return {?proto.IOConsumer}
 */
proto.UIIOStructuredOutput.prototype.getReq = function() {
  return /** @type{?proto.IOConsumer} */ (
    jspb.Message.getWrapperField(this, proto.IOConsumer, 2));
};


/** @param {?proto.IOConsumer|undefined} value */
proto.UIIOStructuredOutput.prototype.setReq = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.UIIOStructuredOutput.prototype.clearReq = function() {
  this.setReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UIIOStructuredOutput.prototype.hasReq = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional IOReadResult progress = 3;
 * @return {?proto.IOReadResult}
 */
proto.UIIOStructuredOutput.prototype.getProgress = function() {
  return /** @type{?proto.IOReadResult} */ (
    jspb.Message.getWrapperField(this, proto.IOReadResult, 3));
};


/** @param {?proto.IOReadResult|undefined} value */
proto.UIIOStructuredOutput.prototype.setProgress = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.UIIOStructuredOutput.prototype.clearProgress = function() {
  this.setProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UIIOStructuredOutput.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool complete = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.UIIOStructuredOutput.prototype.getComplete = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.UIIOStructuredOutput.prototype.setComplete = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UIIOStructuredInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UIIOStructuredInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UIIOStructuredInput.displayName = 'proto.UIIOStructuredInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UIIOStructuredInput.prototype.toObject = function(opt_includeInstance) {
  return proto.UIIOStructuredInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UIIOStructuredInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIOStructuredInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    producer: (f = msg.getProducer()) && proto.IOProducer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UIIOStructuredInput}
 */
proto.UIIOStructuredInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UIIOStructuredInput;
  return proto.UIIOStructuredInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UIIOStructuredInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UIIOStructuredInput}
 */
proto.UIIOStructuredInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IOProducer;
      reader.readMessage(value,proto.IOProducer.deserializeBinaryFromReader);
      msg.setProducer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UIIOStructuredInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UIIOStructuredInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UIIOStructuredInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIOStructuredInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProducer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.IOProducer.serializeBinaryToWriter
    );
  }
};


/**
 * optional IOProducer producer = 1;
 * @return {?proto.IOProducer}
 */
proto.UIIOStructuredInput.prototype.getProducer = function() {
  return /** @type{?proto.IOProducer} */ (
    jspb.Message.getWrapperField(this, proto.IOProducer, 1));
};


/** @param {?proto.IOProducer|undefined} value */
proto.UIIOStructuredInput.prototype.setProducer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UIIOStructuredInput.prototype.clearProducer = function() {
  this.setProducer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UIIOStructuredInput.prototype.hasProducer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.IOConsumerInterpretation = {
  IOCI_INVALID: 0,
  IOCI_RAW: 1,
  IOCI_LITTLE_ENDIAN: 2,
  IOCI_DECIMAL: 3
};

goog.object.extend(exports, proto);
