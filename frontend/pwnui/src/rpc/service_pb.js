/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.IOElementType', null, global);
goog.exportSymbol('proto.IOReadChunk', null, global);
goog.exportSymbol('proto.IOReadChunk.Regex', null, global);
goog.exportSymbol('proto.IOReadChunkResult', null, global);
goog.exportSymbol('proto.IOReadRequest', null, global);
goog.exportSymbol('proto.IOReadResponse', null, global);
goog.exportSymbol('proto.IOServerRequest', null, global);
goog.exportSymbol('proto.IOServerResponse', null, global);
goog.exportSymbol('proto.IOWriteChunk', null, global);
goog.exportSymbol('proto.IOWriteChunk.LittleEndianInteger', null, global);
goog.exportSymbol('proto.IOWriteRequest', null, global);
goog.exportSymbol('proto.NewSessionRequest', null, global);
goog.exportSymbol('proto.NewSessionResponse', null, global);
goog.exportSymbol('proto.UIIOChunk', null, global);
goog.exportSymbol('proto.UIIOChunkUpdate', null, global);
goog.exportSymbol('proto.UIIODataRequest', null, global);
goog.exportSymbol('proto.UIIODataUpdate', null, global);
goog.exportSymbol('proto.UIIOElement', null, global);
goog.exportSymbol('proto.UIIOOperation', null, global);
goog.exportSymbol('proto.UIIOOperation.UIIOOperationSource', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NewSessionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NewSessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NewSessionRequest.displayName = 'proto.NewSessionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NewSessionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NewSessionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NewSessionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewSessionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    binary: jspb.Message.getFieldWithDefault(msg, 1, ""),
    script: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NewSessionRequest}
 */
proto.NewSessionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NewSessionRequest;
  return proto.NewSessionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NewSessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NewSessionRequest}
 */
proto.NewSessionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBinary(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NewSessionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NewSessionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NewSessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewSessionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBinary();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScript();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string binary = 1;
 * @return {string}
 */
proto.NewSessionRequest.prototype.getBinary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NewSessionRequest.prototype.setBinary = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string script = 2;
 * @return {string}
 */
proto.NewSessionRequest.prototype.getScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.NewSessionRequest.prototype.setScript = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NewSessionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NewSessionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NewSessionResponse.displayName = 'proto.NewSessionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NewSessionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.NewSessionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NewSessionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewSessionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NewSessionResponse}
 */
proto.NewSessionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NewSessionResponse;
  return proto.NewSessionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NewSessionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NewSessionResponse}
 */
proto.NewSessionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NewSessionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NewSessionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NewSessionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NewSessionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.NewSessionResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NewSessionResponse.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOServerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.IOServerRequest.oneofGroups_);
};
goog.inherits(proto.IOServerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOServerRequest.displayName = 'proto.IOServerRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.IOServerRequest.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.IOServerRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  START_ID: 1,
  READ: 2,
  WRITE: 3
};

/**
 * @return {proto.IOServerRequest.RequestCase}
 */
proto.IOServerRequest.prototype.getRequestCase = function() {
  return /** @type {proto.IOServerRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.IOServerRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOServerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.IOServerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOServerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOServerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    startId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    read: (f = msg.getRead()) && proto.IOReadRequest.toObject(includeInstance, f),
    write: (f = msg.getWrite()) && proto.IOWriteRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOServerRequest}
 */
proto.IOServerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOServerRequest;
  return proto.IOServerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOServerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOServerRequest}
 */
proto.IOServerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartId(value);
      break;
    case 2:
      var value = new proto.IOReadRequest;
      reader.readMessage(value,proto.IOReadRequest.deserializeBinaryFromReader);
      msg.setRead(value);
      break;
    case 3:
      var value = new proto.IOWriteRequest;
      reader.readMessage(value,proto.IOWriteRequest.deserializeBinaryFromReader);
      msg.setWrite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOServerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOServerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOServerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOServerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRead();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.IOReadRequest.serializeBinaryToWriter
    );
  }
  f = message.getWrite();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.IOWriteRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 start_id = 1;
 * @return {number}
 */
proto.IOServerRequest.prototype.getStartId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IOServerRequest.prototype.setStartId = function(value) {
  jspb.Message.setOneofField(this, 1, proto.IOServerRequest.oneofGroups_[0], value);
};


proto.IOServerRequest.prototype.clearStartId = function() {
  jspb.Message.setOneofField(this, 1, proto.IOServerRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOServerRequest.prototype.hasStartId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IOReadRequest read = 2;
 * @return {?proto.IOReadRequest}
 */
proto.IOServerRequest.prototype.getRead = function() {
  return /** @type{?proto.IOReadRequest} */ (
    jspb.Message.getWrapperField(this, proto.IOReadRequest, 2));
};


/** @param {?proto.IOReadRequest|undefined} value */
proto.IOServerRequest.prototype.setRead = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.IOServerRequest.oneofGroups_[0], value);
};


proto.IOServerRequest.prototype.clearRead = function() {
  this.setRead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOServerRequest.prototype.hasRead = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional IOWriteRequest write = 3;
 * @return {?proto.IOWriteRequest}
 */
proto.IOServerRequest.prototype.getWrite = function() {
  return /** @type{?proto.IOWriteRequest} */ (
    jspb.Message.getWrapperField(this, proto.IOWriteRequest, 3));
};


/** @param {?proto.IOWriteRequest|undefined} value */
proto.IOServerRequest.prototype.setWrite = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.IOServerRequest.oneofGroups_[0], value);
};


proto.IOServerRequest.prototype.clearWrite = function() {
  this.setWrite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOServerRequest.prototype.hasWrite = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOServerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.IOServerResponse.oneofGroups_);
};
goog.inherits(proto.IOServerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOServerResponse.displayName = 'proto.IOServerResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.IOServerResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.IOServerResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  ACK: 1,
  READ: 2
};

/**
 * @return {proto.IOServerResponse.ResponseCase}
 */
proto.IOServerResponse.prototype.getResponseCase = function() {
  return /** @type {proto.IOServerResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.IOServerResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOServerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.IOServerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOServerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOServerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ack: jspb.Message.getFieldWithDefault(msg, 1, false),
    read: (f = msg.getRead()) && proto.IOReadResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOServerResponse}
 */
proto.IOServerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOServerResponse;
  return proto.IOServerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOServerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOServerResponse}
 */
proto.IOServerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAck(value);
      break;
    case 2:
      var value = new proto.IOReadResponse;
      reader.readMessage(value,proto.IOReadResponse.deserializeBinaryFromReader);
      msg.setRead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOServerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOServerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOServerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOServerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRead();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.IOReadResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool ack = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.IOServerResponse.prototype.getAck = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.IOServerResponse.prototype.setAck = function(value) {
  jspb.Message.setOneofField(this, 1, proto.IOServerResponse.oneofGroups_[0], value);
};


proto.IOServerResponse.prototype.clearAck = function() {
  jspb.Message.setOneofField(this, 1, proto.IOServerResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOServerResponse.prototype.hasAck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IOReadResponse read = 2;
 * @return {?proto.IOReadResponse}
 */
proto.IOServerResponse.prototype.getRead = function() {
  return /** @type{?proto.IOReadResponse} */ (
    jspb.Message.getWrapperField(this, proto.IOReadResponse, 2));
};


/** @param {?proto.IOReadResponse|undefined} value */
proto.IOServerResponse.prototype.setRead = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.IOServerResponse.oneofGroups_[0], value);
};


proto.IOServerResponse.prototype.clearRead = function() {
  this.setRead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOServerResponse.prototype.hasRead = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOReadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IOReadRequest.repeatedFields_, null);
};
goog.inherits(proto.IOReadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOReadRequest.displayName = 'proto.IOReadRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IOReadRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOReadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.IOReadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOReadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunksList: jspb.Message.toObjectList(msg.getChunksList(),
    proto.IOReadChunk.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOReadRequest}
 */
proto.IOReadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOReadRequest;
  return proto.IOReadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOReadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOReadRequest}
 */
proto.IOReadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IOReadChunk;
      reader.readMessage(value,proto.IOReadChunk.deserializeBinaryFromReader);
      msg.addChunks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOReadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOReadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOReadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.IOReadChunk.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IOReadChunk chunks = 1;
 * @return {!Array<!proto.IOReadChunk>}
 */
proto.IOReadRequest.prototype.getChunksList = function() {
  return /** @type{!Array<!proto.IOReadChunk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IOReadChunk, 1));
};


/** @param {!Array<!proto.IOReadChunk>} value */
proto.IOReadRequest.prototype.setChunksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IOReadChunk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IOReadChunk}
 */
proto.IOReadRequest.prototype.addChunks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IOReadChunk, opt_index);
};


proto.IOReadRequest.prototype.clearChunksList = function() {
  this.setChunksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOReadChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.IOReadChunk.oneofGroups_);
};
goog.inherits(proto.IOReadChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOReadChunk.displayName = 'proto.IOReadChunk';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.IOReadChunk.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.IOReadChunk.ReadCase = {
  READ_NOT_SET: 0,
  REGEX: 1,
  LITTLE_ENDIAN_32: 2
};

/**
 * @return {proto.IOReadChunk.ReadCase}
 */
proto.IOReadChunk.prototype.getReadCase = function() {
  return /** @type {proto.IOReadChunk.ReadCase} */(jspb.Message.computeOneofCase(this, proto.IOReadChunk.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOReadChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.IOReadChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOReadChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    regex: (f = msg.getRegex()) && proto.IOReadChunk.Regex.toObject(includeInstance, f),
    littleEndian32: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOReadChunk}
 */
proto.IOReadChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOReadChunk;
  return proto.IOReadChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOReadChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOReadChunk}
 */
proto.IOReadChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IOReadChunk.Regex;
      reader.readMessage(value,proto.IOReadChunk.Regex.deserializeBinaryFromReader);
      msg.setRegex(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLittleEndian32(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOReadChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOReadChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOReadChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegex();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.IOReadChunk.Regex.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOReadChunk.Regex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IOReadChunk.Regex.repeatedFields_, null);
};
goog.inherits(proto.IOReadChunk.Regex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOReadChunk.Regex.displayName = 'proto.IOReadChunk.Regex';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IOReadChunk.Regex.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOReadChunk.Regex.prototype.toObject = function(opt_includeInstance) {
  return proto.IOReadChunk.Regex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOReadChunk.Regex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadChunk.Regex.toObject = function(includeInstance, msg) {
  var f, obj = {
    regex: jspb.Message.getFieldWithDefault(msg, 1, ""),
    groupsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOReadChunk.Regex}
 */
proto.IOReadChunk.Regex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOReadChunk.Regex;
  return proto.IOReadChunk.Regex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOReadChunk.Regex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOReadChunk.Regex}
 */
proto.IOReadChunk.Regex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegex(value);
      break;
    case 2:
      var value = /** @type {!Array<!proto.IOElementType>} */ (reader.readPackedEnum());
      msg.setGroupsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOReadChunk.Regex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOReadChunk.Regex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOReadChunk.Regex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadChunk.Regex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * optional string regex = 1;
 * @return {string}
 */
proto.IOReadChunk.Regex.prototype.getRegex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.IOReadChunk.Regex.prototype.setRegex = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated IOElementType groups = 2;
 * @return {!Array<!proto.IOElementType>}
 */
proto.IOReadChunk.Regex.prototype.getGroupsList = function() {
  return /** @type {!Array<!proto.IOElementType>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<!proto.IOElementType>} value */
proto.IOReadChunk.Regex.prototype.setGroupsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.IOElementType} value
 * @param {number=} opt_index
 */
proto.IOReadChunk.Regex.prototype.addGroups = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.IOReadChunk.Regex.prototype.clearGroupsList = function() {
  this.setGroupsList([]);
};


/**
 * optional Regex regex = 1;
 * @return {?proto.IOReadChunk.Regex}
 */
proto.IOReadChunk.prototype.getRegex = function() {
  return /** @type{?proto.IOReadChunk.Regex} */ (
    jspb.Message.getWrapperField(this, proto.IOReadChunk.Regex, 1));
};


/** @param {?proto.IOReadChunk.Regex|undefined} value */
proto.IOReadChunk.prototype.setRegex = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.IOReadChunk.oneofGroups_[0], value);
};


proto.IOReadChunk.prototype.clearRegex = function() {
  this.setRegex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOReadChunk.prototype.hasRegex = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool little_endian_32 = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.IOReadChunk.prototype.getLittleEndian32 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.IOReadChunk.prototype.setLittleEndian32 = function(value) {
  jspb.Message.setOneofField(this, 2, proto.IOReadChunk.oneofGroups_[0], value);
};


proto.IOReadChunk.prototype.clearLittleEndian32 = function() {
  jspb.Message.setOneofField(this, 2, proto.IOReadChunk.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOReadChunk.prototype.hasLittleEndian32 = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOReadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IOReadResponse.repeatedFields_, null);
};
goog.inherits(proto.IOReadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOReadResponse.displayName = 'proto.IOReadResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IOReadResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOReadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.IOReadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOReadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunksList: jspb.Message.toObjectList(msg.getChunksList(),
    proto.IOReadChunkResult.toObject, includeInstance),
    error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOReadResponse}
 */
proto.IOReadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOReadResponse;
  return proto.IOReadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOReadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOReadResponse}
 */
proto.IOReadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IOReadChunkResult;
      reader.readMessage(value,proto.IOReadChunkResult.deserializeBinaryFromReader);
      msg.addChunks(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOReadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOReadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOReadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.IOReadChunkResult.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated IOReadChunkResult chunks = 1;
 * @return {!Array<!proto.IOReadChunkResult>}
 */
proto.IOReadResponse.prototype.getChunksList = function() {
  return /** @type{!Array<!proto.IOReadChunkResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IOReadChunkResult, 1));
};


/** @param {!Array<!proto.IOReadChunkResult>} value */
proto.IOReadResponse.prototype.setChunksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IOReadChunkResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IOReadChunkResult}
 */
proto.IOReadResponse.prototype.addChunks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IOReadChunkResult, opt_index);
};


proto.IOReadResponse.prototype.clearChunksList = function() {
  this.setChunksList([]);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.IOReadResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.IOReadResponse.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOReadChunkResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IOReadChunkResult.repeatedFields_, null);
};
goog.inherits(proto.IOReadChunkResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOReadChunkResult.displayName = 'proto.IOReadChunkResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IOReadChunkResult.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOReadChunkResult.prototype.toObject = function(opt_includeInstance) {
  return proto.IOReadChunkResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOReadChunkResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadChunkResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    groupsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOReadChunkResult}
 */
proto.IOReadChunkResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOReadChunkResult;
  return proto.IOReadChunkResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOReadChunkResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOReadChunkResult}
 */
proto.IOReadChunkResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOReadChunkResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOReadChunkResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOReadChunkResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOReadChunkResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {string}
 */
proto.IOReadChunkResult.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.IOReadChunkResult.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.IOReadChunkResult.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IOReadChunkResult.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated string groups = 2;
 * @return {!Array<string>}
 */
proto.IOReadChunkResult.prototype.getGroupsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.IOReadChunkResult.prototype.setGroupsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.IOReadChunkResult.prototype.addGroups = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.IOReadChunkResult.prototype.clearGroupsList = function() {
  this.setGroupsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOWriteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IOWriteRequest.repeatedFields_, null);
};
goog.inherits(proto.IOWriteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOWriteRequest.displayName = 'proto.IOWriteRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IOWriteRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOWriteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.IOWriteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOWriteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOWriteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunksList: jspb.Message.toObjectList(msg.getChunksList(),
    proto.IOWriteChunk.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOWriteRequest}
 */
proto.IOWriteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOWriteRequest;
  return proto.IOWriteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOWriteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOWriteRequest}
 */
proto.IOWriteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IOWriteChunk;
      reader.readMessage(value,proto.IOWriteChunk.deserializeBinaryFromReader);
      msg.addChunks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOWriteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOWriteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOWriteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOWriteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.IOWriteChunk.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IOWriteChunk chunks = 1;
 * @return {!Array<!proto.IOWriteChunk>}
 */
proto.IOWriteRequest.prototype.getChunksList = function() {
  return /** @type{!Array<!proto.IOWriteChunk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IOWriteChunk, 1));
};


/** @param {!Array<!proto.IOWriteChunk>} value */
proto.IOWriteRequest.prototype.setChunksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IOWriteChunk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IOWriteChunk}
 */
proto.IOWriteRequest.prototype.addChunks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IOWriteChunk, opt_index);
};


proto.IOWriteRequest.prototype.clearChunksList = function() {
  this.setChunksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOWriteChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.IOWriteChunk.oneofGroups_);
};
goog.inherits(proto.IOWriteChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOWriteChunk.displayName = 'proto.IOWriteChunk';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.IOWriteChunk.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.IOWriteChunk.WriteCase = {
  WRITE_NOT_SET: 0,
  DATA: 1,
  DECIMAL_INTEGER: 2,
  LITTLE_ENDIAN_INTEGER: 3
};

/**
 * @return {proto.IOWriteChunk.WriteCase}
 */
proto.IOWriteChunk.prototype.getWriteCase = function() {
  return /** @type {proto.IOWriteChunk.WriteCase} */(jspb.Message.computeOneofCase(this, proto.IOWriteChunk.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOWriteChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.IOWriteChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOWriteChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOWriteChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    decimalInteger: jspb.Message.getFieldWithDefault(msg, 2, 0),
    littleEndianInteger: (f = msg.getLittleEndianInteger()) && proto.IOWriteChunk.LittleEndianInteger.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOWriteChunk}
 */
proto.IOWriteChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOWriteChunk;
  return proto.IOWriteChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOWriteChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOWriteChunk}
 */
proto.IOWriteChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDecimalInteger(value);
      break;
    case 3:
      var value = new proto.IOWriteChunk.LittleEndianInteger;
      reader.readMessage(value,proto.IOWriteChunk.LittleEndianInteger.deserializeBinaryFromReader);
      msg.setLittleEndianInteger(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOWriteChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOWriteChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOWriteChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOWriteChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLittleEndianInteger();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.IOWriteChunk.LittleEndianInteger.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IOWriteChunk.LittleEndianInteger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IOWriteChunk.LittleEndianInteger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IOWriteChunk.LittleEndianInteger.displayName = 'proto.IOWriteChunk.LittleEndianInteger';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IOWriteChunk.LittleEndianInteger.prototype.toObject = function(opt_includeInstance) {
  return proto.IOWriteChunk.LittleEndianInteger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IOWriteChunk.LittleEndianInteger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOWriteChunk.LittleEndianInteger.toObject = function(includeInstance, msg) {
  var f, obj = {
    integer: jspb.Message.getFieldWithDefault(msg, 1, 0),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IOWriteChunk.LittleEndianInteger}
 */
proto.IOWriteChunk.LittleEndianInteger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IOWriteChunk.LittleEndianInteger;
  return proto.IOWriteChunk.LittleEndianInteger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IOWriteChunk.LittleEndianInteger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IOWriteChunk.LittleEndianInteger}
 */
proto.IOWriteChunk.LittleEndianInteger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInteger(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IOWriteChunk.LittleEndianInteger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IOWriteChunk.LittleEndianInteger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IOWriteChunk.LittleEndianInteger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IOWriteChunk.LittleEndianInteger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInteger();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 integer = 1;
 * @return {number}
 */
proto.IOWriteChunk.LittleEndianInteger.prototype.getInteger = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IOWriteChunk.LittleEndianInteger.prototype.setInteger = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 width = 2;
 * @return {number}
 */
proto.IOWriteChunk.LittleEndianInteger.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IOWriteChunk.LittleEndianInteger.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes data = 1;
 * @return {string}
 */
proto.IOWriteChunk.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.IOWriteChunk.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.IOWriteChunk.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IOWriteChunk.prototype.setData = function(value) {
  jspb.Message.setOneofField(this, 1, proto.IOWriteChunk.oneofGroups_[0], value);
};


proto.IOWriteChunk.prototype.clearData = function() {
  jspb.Message.setOneofField(this, 1, proto.IOWriteChunk.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOWriteChunk.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 decimal_integer = 2;
 * @return {number}
 */
proto.IOWriteChunk.prototype.getDecimalInteger = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IOWriteChunk.prototype.setDecimalInteger = function(value) {
  jspb.Message.setOneofField(this, 2, proto.IOWriteChunk.oneofGroups_[0], value);
};


proto.IOWriteChunk.prototype.clearDecimalInteger = function() {
  jspb.Message.setOneofField(this, 2, proto.IOWriteChunk.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOWriteChunk.prototype.hasDecimalInteger = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LittleEndianInteger little_endian_integer = 3;
 * @return {?proto.IOWriteChunk.LittleEndianInteger}
 */
proto.IOWriteChunk.prototype.getLittleEndianInteger = function() {
  return /** @type{?proto.IOWriteChunk.LittleEndianInteger} */ (
    jspb.Message.getWrapperField(this, proto.IOWriteChunk.LittleEndianInteger, 3));
};


/** @param {?proto.IOWriteChunk.LittleEndianInteger|undefined} value */
proto.IOWriteChunk.prototype.setLittleEndianInteger = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.IOWriteChunk.oneofGroups_[0], value);
};


proto.IOWriteChunk.prototype.clearLittleEndianInteger = function() {
  this.setLittleEndianInteger(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IOWriteChunk.prototype.hasLittleEndianInteger = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UIIODataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UIIODataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UIIODataRequest.displayName = 'proto.UIIODataRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UIIODataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UIIODataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UIIODataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIODataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UIIODataRequest}
 */
proto.UIIODataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UIIODataRequest;
  return proto.UIIODataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UIIODataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UIIODataRequest}
 */
proto.UIIODataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UIIODataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UIIODataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UIIODataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIODataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 session_id = 1;
 * @return {number}
 */
proto.UIIODataRequest.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UIIODataRequest.prototype.setSessionId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UIIODataUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UIIODataUpdate.oneofGroups_);
};
goog.inherits(proto.UIIODataUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UIIODataUpdate.displayName = 'proto.UIIODataUpdate';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UIIODataUpdate.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.UIIODataUpdate.UpdateCase = {
  UPDATE_NOT_SET: 0,
  APPEND_OPERATION: 1,
  UPDATE_CHUNK: 2
};

/**
 * @return {proto.UIIODataUpdate.UpdateCase}
 */
proto.UIIODataUpdate.prototype.getUpdateCase = function() {
  return /** @type {proto.UIIODataUpdate.UpdateCase} */(jspb.Message.computeOneofCase(this, proto.UIIODataUpdate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UIIODataUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.UIIODataUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UIIODataUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIODataUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    appendOperation: (f = msg.getAppendOperation()) && proto.UIIOOperation.toObject(includeInstance, f),
    updateChunk: (f = msg.getUpdateChunk()) && proto.UIIOChunkUpdate.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UIIODataUpdate}
 */
proto.UIIODataUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UIIODataUpdate;
  return proto.UIIODataUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UIIODataUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UIIODataUpdate}
 */
proto.UIIODataUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UIIOOperation;
      reader.readMessage(value,proto.UIIOOperation.deserializeBinaryFromReader);
      msg.setAppendOperation(value);
      break;
    case 2:
      var value = new proto.UIIOChunkUpdate;
      reader.readMessage(value,proto.UIIOChunkUpdate.deserializeBinaryFromReader);
      msg.setUpdateChunk(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UIIODataUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UIIODataUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UIIODataUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIODataUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppendOperation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UIIOOperation.serializeBinaryToWriter
    );
  }
  f = message.getUpdateChunk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.UIIOChunkUpdate.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional UIIOOperation append_operation = 1;
 * @return {?proto.UIIOOperation}
 */
proto.UIIODataUpdate.prototype.getAppendOperation = function() {
  return /** @type{?proto.UIIOOperation} */ (
    jspb.Message.getWrapperField(this, proto.UIIOOperation, 1));
};


/** @param {?proto.UIIOOperation|undefined} value */
proto.UIIODataUpdate.prototype.setAppendOperation = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.UIIODataUpdate.oneofGroups_[0], value);
};


proto.UIIODataUpdate.prototype.clearAppendOperation = function() {
  this.setAppendOperation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UIIODataUpdate.prototype.hasAppendOperation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UIIOChunkUpdate update_chunk = 2;
 * @return {?proto.UIIOChunkUpdate}
 */
proto.UIIODataUpdate.prototype.getUpdateChunk = function() {
  return /** @type{?proto.UIIOChunkUpdate} */ (
    jspb.Message.getWrapperField(this, proto.UIIOChunkUpdate, 2));
};


/** @param {?proto.UIIOChunkUpdate|undefined} value */
proto.UIIODataUpdate.prototype.setUpdateChunk = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.UIIODataUpdate.oneofGroups_[0], value);
};


proto.UIIODataUpdate.prototype.clearUpdateChunk = function() {
  this.setUpdateChunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UIIODataUpdate.prototype.hasUpdateChunk = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.UIIODataUpdate.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.UIIODataUpdate.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UIIOChunkUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UIIOChunkUpdate.repeatedFields_, null);
};
goog.inherits(proto.UIIOChunkUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UIIOChunkUpdate.displayName = 'proto.UIIOChunkUpdate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UIIOChunkUpdate.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UIIOChunkUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.UIIOChunkUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UIIOChunkUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIOChunkUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunkId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.UIIOElement.toObject, includeInstance),
    remove: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UIIOChunkUpdate}
 */
proto.UIIOChunkUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UIIOChunkUpdate;
  return proto.UIIOChunkUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UIIOChunkUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UIIOChunkUpdate}
 */
proto.UIIOChunkUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunkId(value);
      break;
    case 2:
      var value = new proto.UIIOElement;
      reader.readMessage(value,proto.UIIOElement.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemove(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UIIOChunkUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UIIOChunkUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UIIOChunkUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIOChunkUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunkId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.UIIOElement.serializeBinaryToWriter
    );
  }
  f = message.getRemove();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int32 chunk_id = 1;
 * @return {number}
 */
proto.UIIOChunkUpdate.prototype.getChunkId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UIIOChunkUpdate.prototype.setChunkId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated UIIOElement elements = 2;
 * @return {!Array<!proto.UIIOElement>}
 */
proto.UIIOChunkUpdate.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.UIIOElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UIIOElement, 2));
};


/** @param {!Array<!proto.UIIOElement>} value */
proto.UIIOChunkUpdate.prototype.setElementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.UIIOElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UIIOElement}
 */
proto.UIIOChunkUpdate.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.UIIOElement, opt_index);
};


proto.UIIOChunkUpdate.prototype.clearElementsList = function() {
  this.setElementsList([]);
};


/**
 * optional bool remove = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.UIIOChunkUpdate.prototype.getRemove = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.UIIOChunkUpdate.prototype.setRemove = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UIIOOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UIIOOperation.repeatedFields_, null);
};
goog.inherits(proto.UIIOOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UIIOOperation.displayName = 'proto.UIIOOperation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UIIOOperation.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UIIOOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.UIIOOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UIIOOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIOOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    opId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chunksList: jspb.Message.toObjectList(msg.getChunksList(),
    proto.UIIOChunk.toObject, includeInstance),
    source: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UIIOOperation}
 */
proto.UIIOOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UIIOOperation;
  return proto.UIIOOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UIIOOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UIIOOperation}
 */
proto.UIIOOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpId(value);
      break;
    case 2:
      var value = new proto.UIIOChunk;
      reader.readMessage(value,proto.UIIOChunk.deserializeBinaryFromReader);
      msg.addChunks(value);
      break;
    case 3:
      var value = /** @type {!proto.UIIOOperation.UIIOOperationSource} */ (reader.readEnum());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UIIOOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UIIOOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UIIOOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIOOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getChunksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.UIIOChunk.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.UIIOOperation.UIIOOperationSource = {
  INVALID: 0,
  STDIN: 1,
  STDOUT: 2
};

/**
 * optional int32 op_id = 1;
 * @return {number}
 */
proto.UIIOOperation.prototype.getOpId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UIIOOperation.prototype.setOpId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated UIIOChunk chunks = 2;
 * @return {!Array<!proto.UIIOChunk>}
 */
proto.UIIOOperation.prototype.getChunksList = function() {
  return /** @type{!Array<!proto.UIIOChunk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UIIOChunk, 2));
};


/** @param {!Array<!proto.UIIOChunk>} value */
proto.UIIOOperation.prototype.setChunksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.UIIOChunk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UIIOChunk}
 */
proto.UIIOOperation.prototype.addChunks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.UIIOChunk, opt_index);
};


proto.UIIOOperation.prototype.clearChunksList = function() {
  this.setChunksList([]);
};


/**
 * optional UIIOOperationSource source = 3;
 * @return {!proto.UIIOOperation.UIIOOperationSource}
 */
proto.UIIOOperation.prototype.getSource = function() {
  return /** @type {!proto.UIIOOperation.UIIOOperationSource} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.UIIOOperation.UIIOOperationSource} value */
proto.UIIOOperation.prototype.setSource = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UIIOChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UIIOChunk.repeatedFields_, null);
};
goog.inherits(proto.UIIOChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UIIOChunk.displayName = 'proto.UIIOChunk';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UIIOChunk.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UIIOChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.UIIOChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UIIOChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIOChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunkId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.UIIOElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UIIOChunk}
 */
proto.UIIOChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UIIOChunk;
  return proto.UIIOChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UIIOChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UIIOChunk}
 */
proto.UIIOChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunkId(value);
      break;
    case 3:
      var value = new proto.UIIOElement;
      reader.readMessage(value,proto.UIIOElement.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UIIOChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UIIOChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UIIOChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIOChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunkId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.UIIOElement.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 chunk_id = 1;
 * @return {number}
 */
proto.UIIOChunk.prototype.getChunkId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UIIOChunk.prototype.setChunkId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated UIIOElement elements = 3;
 * @return {!Array<!proto.UIIOElement>}
 */
proto.UIIOChunk.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.UIIOElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UIIOElement, 3));
};


/** @param {!Array<!proto.UIIOElement>} value */
proto.UIIOChunk.prototype.setElementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.UIIOElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UIIOElement}
 */
proto.UIIOChunk.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.UIIOElement, opt_index);
};


proto.UIIOChunk.prototype.clearElementsList = function() {
  this.setElementsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UIIOElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UIIOElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UIIOElement.displayName = 'proto.UIIOElement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UIIOElement.prototype.toObject = function(opt_includeInstance) {
  return proto.UIIOElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UIIOElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIOElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pending: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UIIOElement}
 */
proto.UIIOElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UIIOElement;
  return proto.UIIOElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UIIOElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UIIOElement}
 */
proto.UIIOElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {!proto.IOElementType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPending(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UIIOElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UIIOElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UIIOElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIIOElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPending();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {string}
 */
proto.UIIOElement.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.UIIOElement.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.UIIOElement.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.UIIOElement.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional IOElementType type = 2;
 * @return {!proto.IOElementType}
 */
proto.UIIOElement.prototype.getType = function() {
  return /** @type {!proto.IOElementType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.IOElementType} value */
proto.UIIOElement.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool pending = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.UIIOElement.prototype.getPending = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.UIIOElement.prototype.setPending = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.IOElementType = {
  IOET_INVALID: 0,
  IOET_UNINTERESTING: 1,
  IOET_UNPROCESSED: 2,
  IOET_RAW: 3,
  IOET_HEX32: 4,
  IOET_DECIMAL32: 5
};

goog.object.extend(exports, proto);
